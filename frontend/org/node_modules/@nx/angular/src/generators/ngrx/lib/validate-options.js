"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOptions = void 0;
const semver_1 = require("semver");
const version_utils_1 = require("../../utils/version-utils");
const version_utils_2 = require("../../../utils/version-utils");
function validateOptions(tree, options) {
    var _a, _b, _c;
    if (!options.module && !options.parent) {
        throw new Error('Please provide a value for "--parent"!');
    }
    if (options.module && !tree.exists(options.module)) {
        throw new Error(`Module does not exist: ${options.module}.`);
    }
    if (options.parent && !tree.exists(options.parent)) {
        throw new Error(`Parent does not exist: ${options.parent}.`);
    }
    const angularVersionInfo = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    const intendedNgRxVersionForAngularMajor = (0, version_utils_2.getPkgVersionForAngularMajorVersion)('ngrxVersion', angularVersionInfo.major);
    const ngrxMajorVersion = (_b = (_a = (0, version_utils_1.getInstalledPackageVersionInfo)(tree, '@ngrx/store')) === null || _a === void 0 ? void 0 : _a.major) !== null && _b !== void 0 ? _b : (0, semver_1.major)((0, semver_1.coerce)(intendedNgRxVersionForAngularMajor));
    if ((0, semver_1.lt)(angularVersionInfo.version, '14.1.0') || ngrxMajorVersion < 15) {
        const parentPath = (_c = options.parent) !== null && _c !== void 0 ? _c : options.module;
        const parentContent = tree.read(parentPath, 'utf-8');
        const { tsquery } = require('@phenomnomnominal/tsquery');
        const ast = tsquery.ast(parentContent);
        const NG_MODULE_DECORATOR_SELECTOR = 'ClassDeclaration > Decorator > CallExpression:has(Identifier[name=NgModule])';
        const nodes = tsquery(ast, NG_MODULE_DECORATOR_SELECTOR, {
            visitAllChildren: true,
        });
        if (nodes.length === 0) {
            throw new Error(`The provided parent path "${parentPath}" does not contain an "NgModule". ` +
                'Please make sure to provide a path to an "NgModule" where the state will be registered. ' +
                'If you are trying to use a "Routes" definition file (for Standalone API usage), ' +
                'please note this is not supported in Angular versions lower than 14.1.0.');
        }
    }
}
exports.validateOptions = validateOptions;
