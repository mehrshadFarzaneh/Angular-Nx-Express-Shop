"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../utils/versions");
function updateFileServerExecutor(tree) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const oldExecutor = '@nrwl/angular:file-server';
        const newExecutor = '@nrwl/web:file-server';
        let needsNrwlWeb = false;
        const nxJson = (0, devkit_1.readNxJson)(tree);
        if (nxJson.targetDefaults) {
            let nxJsonChanged = false;
            for (const [targetName, target] of Object.entries(nxJson.targetDefaults)) {
                if (target.executor === oldExecutor) {
                    nxJson.targetDefaults[targetName].executor = newExecutor;
                    nxJsonChanged = true;
                    needsNrwlWeb = true;
                }
            }
            if (nxJsonChanged) {
                (0, devkit_1.updateNxJson)(tree, nxJson);
            }
        }
        const projects = (0, devkit_1.getProjects)(tree);
        for (const [projectName, project] of projects.entries()) {
            let projectChanged = false;
            for (const [targetName, target] of Object.entries((_a = project.targets) !== null && _a !== void 0 ? _a : {})) {
                if (target.executor === oldExecutor) {
                    project.targets[targetName].executor = newExecutor;
                    projectChanged = true;
                    needsNrwlWeb = true;
                }
            }
            if (projectChanged) {
                (0, devkit_1.updateProjectConfiguration)(tree, projectName, project);
            }
        }
        if (needsNrwlWeb) {
            (0, devkit_1.addDependenciesToPackageJson)(tree, {}, { '@nrwl/web': versions_1.nxVersion });
        }
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = updateFileServerExecutor;
