"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateHostAppRoutes = void 0;
const project_configuration_1 = require("nx/src/generators/utils/project-configuration");
const devkit_1 = require("@nx/devkit");
const ensure_typescript_1 = require("@nx/js/src/utils/typescript/ensure-typescript");
const route_utils_1 = require("../../../utils/nx-devkit/route-utils");
let tsModule;
function updateHostAppRoutes(tree, options) {
    if (!tsModule) {
        tsModule = (0, ensure_typescript_1.ensureTypescript)();
    }
    const { sourceRoot } = (0, project_configuration_1.readProjectConfiguration)(tree, options.appName);
    const remoteRoutes = options.remotes && Array.isArray(options.remotes)
        ? options.remotes.reduce((routes, remote) => `${routes}\n<li><a routerLink='${remote}'>${(0, devkit_1.names)(remote).className}</a></li>`, '')
        : '';
    tree.write((0, devkit_1.joinPathFragments)(sourceRoot, 'app/app.component.html'), `<ul class="remote-menu">
<li><a routerLink='/'>Home</a></li>${remoteRoutes}
</ul>
<router-outlet></router-outlet>
`);
    let pathToHostRootRoutingFile = (0, devkit_1.joinPathFragments)(sourceRoot, 'app/app.routes.ts');
    let hostRootRoutingFile = tree.read(pathToHostRootRoutingFile, 'utf-8');
    if (!hostRootRoutingFile) {
        pathToHostRootRoutingFile = (0, devkit_1.joinPathFragments)(sourceRoot, 'app/app-routing.module.ts');
        hostRootRoutingFile = tree.read(pathToHostRootRoutingFile, 'utf-8');
    }
    let sourceFile = tsModule.createSourceFile(pathToHostRootRoutingFile, hostRootRoutingFile, tsModule.ScriptTarget.Latest, true);
    (0, route_utils_1.addRoute)(tree, pathToHostRootRoutingFile, `{
      path: '',
      component: NxWelcomeComponent
    }`);
    tree.write(pathToHostRootRoutingFile, `import { NxWelcomeComponent } from './nx-welcome.component';
    ${tree.read(pathToHostRootRoutingFile, 'utf-8')}`);
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/host-files'), (0, devkit_1.joinPathFragments)(sourceRoot, 'app'), {
        appName: options.appName,
        tmpl: '',
    });
}
exports.updateHostAppRoutes = updateHostAppRoutes;
