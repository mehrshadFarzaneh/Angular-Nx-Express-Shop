import { EventEmitter, Output, Input, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class NgxMatBaseColorCanvas {
    constructor(zone, elementId) {
        this.zone = zone;
        this.colorChanged = new EventEmitter();
        this.x = 0;
        this.y = 0;
        this.drag = false;
        this._destroyed = new Subject();
        this.elementId = elementId;
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    ngAfterViewInit() {
        this.canvas = document.getElementById(this.elementId);
        this.ctx = this.canvas.getContext('2d');
        this.width = this.canvas.width;
        this.height = this.canvas.height;
        this.draw();
    }
    draw() {
        this.ctx.clearRect(0, 0, this.width, this.height);
        this.ctx.rect(0, 0, this.width, this.height);
        this.fillGradient();
        if (this.y != 0) {
            this.redrawIndicator(this.x, this.y);
        }
    }
    onMousedown(e) {
        this.drag = true;
        this.changeColor(e);
        this.zone.runOutsideAngular(() => {
            this.canvas.addEventListener('mousemove', this.onMousemove.bind(this));
        });
    }
    onMousemove(e) {
        if (this.drag) {
            this.zone.run(() => {
                this.changeColor(e);
            });
        }
    }
    onMouseup(e) {
        this.drag = false;
        this.canvas.removeEventListener('mousemove', this.onMousemove);
    }
    emitChange(color) {
        this.colorChanged.emit(color);
    }
}
/** @nocollapse */ NgxMatBaseColorCanvas.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: NgxMatBaseColorCanvas, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ NgxMatBaseColorCanvas.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.2", type: NgxMatBaseColorCanvas, inputs: { color: "color" }, outputs: { colorChanged: "colorChanged" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: NgxMatBaseColorCanvas, decorators: [{
            type: Directive,
            args: [{}]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined }]; }, propDecorators: { colorChanged: [{
                type: Output
            }], color: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb2xvci1jYW52YXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb2xvci1waWNrZXIvc3JjL2xpYi9jb21wb25lbnRzL2NvbG9yLWNhbnZhcy9iYXNlLWNvbG9yLWNhbnZhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQW9DLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUsvQixNQUFNLE9BQWdCLHFCQUFxQjtJQW9CMUMsWUFBc0IsSUFBWSxFQUFFLFNBQWlCO1FBQS9CLFNBQUksR0FBSixJQUFJLENBQVE7UUFsQnhCLGlCQUFZLEdBQXdCLElBQUksWUFBWSxFQUFTLENBQUM7UUFXeEUsTUFBQyxHQUFXLENBQUMsQ0FBQztRQUNkLE1BQUMsR0FBVyxDQUFDLENBQUM7UUFFZCxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBRUgsZUFBVSxHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDO1FBR3pELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQzVCLENBQUM7SUFFRCxXQUFXO1FBQ1YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxlQUFlO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBc0IsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUVTLElBQUk7UUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQztJQUNGLENBQUM7SUFHTSxXQUFXLENBQUMsQ0FBYTtRQUMvQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXBCLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUFDLENBQUE7SUFDSCxDQUFDO0lBRU0sV0FBVyxDQUFDLENBQWE7UUFDL0IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO2dCQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFBO1NBQ0Y7SUFDRixDQUFDO0lBRU0sU0FBUyxDQUFDLENBQWE7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTSxVQUFVLENBQUMsS0FBWTtRQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDOztxSUF2RW9CLHFCQUFxQjt5SEFBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBSDFDLFNBQVM7bUJBQUMsRUFFVjtrSEFHVSxZQUFZO3NCQUFyQixNQUFNO2dCQUNFLEtBQUs7c0JBQWIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT3V0cHV0LCBJbnB1dCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBOZ1pvbmUsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uL21vZGVscyc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG5cclxufSlcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5neE1hdEJhc2VDb2xvckNhbnZhcyBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG5cdEBPdXRwdXQoKSBjb2xvckNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxDb2xvcj4gPSBuZXcgRXZlbnRFbWl0dGVyPENvbG9yPigpO1xyXG5cdEBJbnB1dCgpIGNvbG9yOiBDb2xvcjtcclxuXHJcblx0Y2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuXHJcblx0ZWxlbWVudElkOiBzdHJpbmc7XHJcblxyXG5cdGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG5cdHdpZHRoOiBudW1iZXI7XHJcblx0aGVpZ2h0OiBudW1iZXI7XHJcblxyXG5cdHg6IG51bWJlciA9IDA7XHJcblx0eTogbnVtYmVyID0gMDtcclxuXHJcblx0ZHJhZyA9IGZhbHNlO1xyXG5cclxuXHRwcm90ZWN0ZWQgX2Rlc3Ryb3llZDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCB6b25lOiBOZ1pvbmUsIGVsZW1lbnRJZDogc3RyaW5nKSB7XHJcblx0XHR0aGlzLmVsZW1lbnRJZCA9IGVsZW1lbnRJZDtcclxuXHR9XHJcblxyXG5cdG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG5cdFx0dGhpcy5fZGVzdHJveWVkLm5leHQoKTtcclxuXHRcdHRoaXMuX2Rlc3Ryb3llZC5jb21wbGV0ZSgpO1xyXG5cdH1cclxuXHJcblx0bmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG5cdFx0dGhpcy5jYW52YXMgPSA8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbGVtZW50SWQpO1xyXG5cdFx0dGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cdFx0dGhpcy53aWR0aCA9IHRoaXMuY2FudmFzLndpZHRoO1xyXG5cdFx0dGhpcy5oZWlnaHQgPSB0aGlzLmNhbnZhcy5oZWlnaHQ7XHJcblx0XHR0aGlzLmRyYXcoKTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBkcmF3KCkge1xyXG5cdFx0dGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuXHRcdHRoaXMuY3R4LnJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG5cdFx0dGhpcy5maWxsR3JhZGllbnQoKTtcclxuXHRcdGlmICh0aGlzLnkgIT0gMCkge1xyXG5cdFx0XHR0aGlzLnJlZHJhd0luZGljYXRvcih0aGlzLngsIHRoaXMueSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcblx0cHVibGljIG9uTW91c2Vkb3duKGU6IE1vdXNlRXZlbnQpIHtcclxuXHRcdHRoaXMuZHJhZyA9IHRydWU7XHJcblx0XHR0aGlzLmNoYW5nZUNvbG9yKGUpO1xyXG5cclxuXHRcdHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcblx0XHRcdHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZW1vdmUuYmluZCh0aGlzKSk7XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0cHVibGljIG9uTW91c2Vtb3ZlKGU6IE1vdXNlRXZlbnQpIHtcclxuXHRcdGlmICh0aGlzLmRyYWcpIHtcclxuXHRcdFx0dGhpcy56b25lLnJ1bigoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5jaGFuZ2VDb2xvcihlKTtcclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBvbk1vdXNldXAoZTogTW91c2VFdmVudCkge1xyXG5cdFx0dGhpcy5kcmFnID0gZmFsc2U7XHJcblx0XHR0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2Vtb3ZlKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBlbWl0Q2hhbmdlKGNvbG9yOiBDb2xvcikge1xyXG5cdFx0dGhpcy5jb2xvckNoYW5nZWQuZW1pdChjb2xvcik7XHJcblx0fVxyXG5cclxuXHRhYnN0cmFjdCBjaGFuZ2VDb2xvcihlOiBNb3VzZUV2ZW50KTogdm9pZDtcclxuXHRhYnN0cmFjdCBmaWxsR3JhZGllbnQoKTogdm9pZDtcclxuXHRhYnN0cmFjdCByZWRyYXdJbmRpY2F0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkO1xyXG5cclxufVxyXG4iXX0=