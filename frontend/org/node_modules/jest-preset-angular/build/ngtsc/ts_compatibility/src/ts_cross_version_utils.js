"use strict";
/*!
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineModifiers = exports.getModifiers = exports.getDecorators = exports.updateConstructorDeclaration = exports.createSetAccessorDeclaration = exports.updateSetAccessorDeclaration = exports.createGetAccessorDeclaration = exports.updateGetAccessorDeclaration = exports.createPropertyDeclaration = exports.updatePropertyDeclaration = exports.createMethodDeclaration = exports.updateMethodDeclaration = exports.createClassDeclaration = exports.updateClassDeclaration = exports.updateImportDeclaration = exports.updateParameterDeclaration = void 0;
const typescript_1 = __importDefault(require("typescript"));
const IS_AFTER_TS_48 = isAfterVersion(4, 8);
exports.updateParameterDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.updateParameterDeclaration :
    (node, modifiers, dotDotDotToken, name, questionToken, type, initializer) => typescript_1.default.factory.updateParameterDeclaration(node, ...splitModifiers(modifiers), dotDotDotToken, name, questionToken, type, initializer);
exports.updateImportDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.updateImportDeclaration :
    (node, modifiers, importClause, moduleSpecifier, assertClause) => typescript_1.default.factory.updateImportDeclaration(node, undefined, modifiers, importClause, moduleSpecifier, assertClause);
exports.updateClassDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.updateClassDeclaration :
    (node, combinedModifiers, name, typeParameters, heritageClauses, members) => typescript_1.default.factory.updateClassDeclaration(node, ...splitModifiers(combinedModifiers), name, typeParameters, heritageClauses, members);
exports.createClassDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.createClassDeclaration :
    (combinedModifiers, name, typeParameters, heritageClauses, members) => typescript_1.default.factory.createClassDeclaration(...splitModifiers(combinedModifiers), name, typeParameters, heritageClauses, members);
exports.updateMethodDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.updateMethodDeclaration :
    (node, modifiers, asteriskToken, name, questionToken, typeParameters, parameters, type, body) => typescript_1.default.factory.updateMethodDeclaration(node, ...splitModifiers(modifiers), asteriskToken, name, questionToken, typeParameters, parameters, type, body);
exports.createMethodDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.createMethodDeclaration :
    (modifiers, asteriskToken, name, questionToken, typeParameters, parameters, type, body) => typescript_1.default.factory.createMethodDeclaration(...splitModifiers(modifiers), asteriskToken, name, questionToken, typeParameters, parameters, type, body);
exports.updatePropertyDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.updatePropertyDeclaration :
    (node, modifiers, name, questionOrExclamationToken, type, initializer) => typescript_1.default.factory.updatePropertyDeclaration(node, ...splitModifiers(modifiers), name, questionOrExclamationToken, type, initializer);
exports.createPropertyDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.createPropertyDeclaration :
    (modifiers, name, questionOrExclamationToken, type, initializer) => typescript_1.default.factory.createPropertyDeclaration(...splitModifiers(modifiers), name, questionOrExclamationToken, type, initializer);
exports.updateGetAccessorDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.updateGetAccessorDeclaration :
    (node, modifiers, name, parameters, type, body) => typescript_1.default.factory.updateGetAccessorDeclaration(node, ...splitModifiers(modifiers), name, parameters, type, body);
exports.createGetAccessorDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.createGetAccessorDeclaration :
    (modifiers, name, parameters, type, body) => typescript_1.default.factory.createGetAccessorDeclaration(...splitModifiers(modifiers), name, parameters, type, body);
exports.updateSetAccessorDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.updateSetAccessorDeclaration :
    (node, modifiers, name, parameters, body) => typescript_1.default.factory.updateSetAccessorDeclaration(node, ...splitModifiers(modifiers), name, parameters, body);
exports.createSetAccessorDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.createSetAccessorDeclaration :
    (modifiers, name, parameters, body) => typescript_1.default.factory.createSetAccessorDeclaration(...splitModifiers(modifiers), name, parameters, body);
exports.updateConstructorDeclaration = IS_AFTER_TS_48 ?
    typescript_1.default.factory.updateConstructorDeclaration :
    (node, modifiers, parameters, body) => typescript_1.default.factory.updateConstructorDeclaration(node, undefined, modifiers, parameters, body);
exports.getDecorators = IS_AFTER_TS_48 ? typescript_1.default.getDecorators : node => node.decorators;
exports.getModifiers = IS_AFTER_TS_48 ? typescript_1.default.getModifiers : node => node.modifiers;
function combineModifiers(decorators, modifiers) {
    const hasDecorators = decorators === null || decorators === void 0 ? void 0 : decorators.length;
    const hasModifiers = modifiers === null || modifiers === void 0 ? void 0 : modifiers.length;
    if (hasDecorators && hasModifiers) {
        return [...decorators, ...modifiers];
    }
    if (hasDecorators && !hasModifiers) {
        return decorators;
    }
    if (hasModifiers && !hasDecorators) {
        return modifiers;
    }
    return undefined;
}
exports.combineModifiers = combineModifiers;
function splitModifiers(allModifiers) {
    if (!allModifiers) {
        return [undefined, undefined];
    }
    const decorators = [];
    const modifiers = [];
    for (const current of allModifiers) {
        if (typescript_1.default.isDecorator(current)) {
            decorators.push(current);
        }
        else {
            modifiers.push(current);
        }
    }
    return [decorators.length ? decorators : undefined, modifiers.length ? modifiers : undefined];
}
function isAfterVersion(targetMajor, targetMinor) {
    const [major, minor] = typescript_1.default.versionMajorMinor.split('.').map(part => parseInt(part));
    if (major < targetMajor) {
        return false;
    }
    return major === targetMajor ? minor >= targetMinor : true;
}
