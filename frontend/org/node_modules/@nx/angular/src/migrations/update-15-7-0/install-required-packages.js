"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const child_process_1 = require("child_process");
const path_1 = require("path");
const version_utils_1 = require("../../generators/utils/version-utils");
const version_utils_2 = require("../../utils/version-utils");
function default_1(tree) {
    var _a, _b, _c, _d, _e;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const packagesToInstall = [
            '@angular-devkit/core',
            '@angular-devkit/schematics',
            '@schematics/angular',
        ];
        const pkgJson = (0, devkit_1.readJson)(tree, 'package.json');
        const angularMajorVersion = (0, version_utils_1.getInstalledAngularMajorVersion)(tree);
        const angularDevkitVersion = (0, version_utils_2.getPkgVersionForAngularMajorVersion)('angularDevkitVersion', angularMajorVersion);
        const angularCliVersion = (_d = (_b = (_a = pkgJson.devDependencies) === null || _a === void 0 ? void 0 : _a['@angular-devkit/build-angular']) !== null && _b !== void 0 ? _b : (_c = pkgJson.dependencies) === null || _c === void 0 ? void 0 : _c['@angular-devkit/build-angular']) !== null && _d !== void 0 ? _d : angularDevkitVersion;
        const filteredPackages = packagesToInstall
            .filter((pkg) => { var _a, _b; return !((_a = pkgJson.devDependencies) === null || _a === void 0 ? void 0 : _a[pkg]) && !((_b = pkgJson.dependencies) === null || _b === void 0 ? void 0 : _b[pkg]); })
            .reduce((allPkgs, pkg) => (Object.assign(Object.assign({}, allPkgs), { [pkg]: angularCliVersion })), {});
        // even though we are going to install the packages directly, we still want
        // to add them to the tree so the migrate command knows changes were made
        (0, devkit_1.addDependenciesToPackageJson)(tree, {}, Object.assign({}, filteredPackages));
        // we need to install them immediately so the packages are available for
        // other migrations that might be using them
        (_e = pkgJson.devDependencies) !== null && _e !== void 0 ? _e : (pkgJson.devDependencies = {});
        Object.entries(filteredPackages).forEach(([pkg, version]) => {
            pkgJson.devDependencies[pkg] = version;
        });
        (0, devkit_1.writeJsonFile)((0, path_1.join)(tree.root, 'package.json'), pkgJson);
        const pmc = (0, devkit_1.getPackageManagerCommand)();
        (0, child_process_1.execSync)(pmc.install, { stdio: [0, 1, 2] });
    });
}
exports.default = default_1;
