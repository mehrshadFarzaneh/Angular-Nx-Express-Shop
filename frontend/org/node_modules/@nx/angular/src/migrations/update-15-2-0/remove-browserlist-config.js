"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_BROWSERS = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const validBrowserslistConfigFilenames = new Set([
    'browserslist',
    '.browserslistrc',
]);
exports.DEFAULT_BROWSERS = [
    'last 1 Chrome version',
    'last 1 Firefox version',
    'last 2 Edge major versions',
    'last 2 Safari major versions',
    'last 2 iOS major versions',
    'Firefox ESR',
];
function removeBrowserlistConfig(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let browserslist;
        try {
            browserslist = yield Promise.resolve().then(() => require('browserslist'));
        }
        catch (_a) {
            devkit_1.logger.warn('Skipping migration because the "browserslist" package could not be loaded.');
            return;
        }
        // Set the defaults to match the defaults in build-angular.
        browserslist.defaults = exports.DEFAULT_BROWSERS;
        const defaultSupportedBrowsers = new Set(browserslist(exports.DEFAULT_BROWSERS));
        const es5Browsers = new Set(browserslist(['supports es6-module']));
        (0, devkit_1.visitNotIgnoredFiles)(tree, '/', (path) => {
            const fileName = (0, path_1.basename)(path);
            if (!validBrowserslistConfigFilenames.has(fileName) ||
                path.startsWith('node_modules')) {
                return;
            }
            const _a = browserslist.parseConfig(tree.read(path, 'utf-8')), { defaults: browsersListConfig } = _a, otherConfigs = tslib_1.__rest(_a, ["defaults"]);
            if (Object.keys(otherConfigs).length) {
                // The config contains additional sections.
                return;
            }
            const browserslistInProject = browserslist(
            // Exclude from the list ES5 browsers which are not supported.
            browsersListConfig.map((s) => `${s} and supports es6-module`), {
                ignoreUnknownVersions: true,
            });
            if (defaultSupportedBrowsers.size !== browserslistInProject.length) {
                return;
            }
            const shouldDelete = browserslistInProject.every((browser) => defaultSupportedBrowsers.has(browser));
            if (shouldDelete) {
                // All browsers are the same as the default config.
                // Delete file as it's redundant.
                tree.delete(path);
            }
        });
    });
}
exports.default = removeBrowserlistConfig;
