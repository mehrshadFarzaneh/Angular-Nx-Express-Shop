{"version":3,"file":"index.js","sourceRoot":"","sources":["../../index.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,gBAAgB,EAChB,iBAAiB,EACjB,kBAAkB,GACnB,MAAM,iBAAiB,CAAC;AAEzB,OAAO,EACL,kBAAkB,EAClB,iBAAiB,GAElB,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EACL,2BAA2B,EAC3B,sBAAsB,GACvB,MAAM,aAAa,CAAC;AAErB,OAAO,EACL,gBAAgB,EAChB,iBAAiB,EACjB,kBAAkB,GACnB,MAAM,iBAAiB,CAAC;AAEzB,MAAM,UAAU,GAAG,CACjB,OAAe,EACf,MAAY,EACZ,KAAW;IAEX,OAAO,IAAI,iBAAiB,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,UAAU,IAAI,CAClB,OAAe,EACf,MAAY,EACZ,KAAW;IAEX,OAAO,IAAI,kBAAkB,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAC/D,CAAC;AAED,MAAM,UAAU,IAAI,CAAC,OAAe;IAClC,OAAO,gBAAgB,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AACvD,CAAC;AAiBD,MAAM,UAAU,WAAW;IACzB;;;;;OAKG;IACH,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QAClB,OAAO,CAAC,WAAW,CAAC;YAClB,mBAAmB,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC1B,OAAO,EAAE,2BAA2B;aACrC,CAAC;YACF,cAAc,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAC3B,OAAO,EAAE,sBAAsB;aAChC,CAAC;SACH,CAAC,CAAC;KACJ;SAAM;QACL,MAAM,CAAC,MAAM,CAAC;YACZ,mBAAmB,EAAE,2BAA2B;YAChD,cAAc,EAAE,sBAAsB;SACvC,CAAC,CAAC;KACJ;AACH,CAAC;AAED,MAAM,UAAU,gBAAgB;IAC9B,SAAS,CAAC,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;IAE/B,UAAU,CAAC,GAAG,EAAE,CAAC,iBAAiB,EAAE,CAAC,CAAC;IACtC,SAAS,CAAC,GAAG,EAAE;QACb,gBAAgB,EAAE,CAAC,KAAK,EAAE,CAAC;QAC3B,kBAAkB,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,gBAAgB,EAAE,CAAC","sourcesContent":["import {\n  getTestScheduler,\n  initTestScheduler,\n  resetTestScheduler,\n} from './src/scheduler';\n\nimport {\n  TestColdObservable,\n  TestHotObservable,\n  TestObservable,\n} from './src/test-observables';\n\nimport {\n  toHaveSubscriptionsComparer,\n  toBeObservableComparer,\n} from './src/utils';\n\nexport {\n  getTestScheduler,\n  initTestScheduler,\n  resetTestScheduler,\n} from './src/scheduler';\n\nexport function hot(\n  marbles: string,\n  values?: any,\n  error?: any,\n): TestHotObservable {\n  return new TestHotObservable(marbles.trim(), values, error);\n}\n\nexport function cold(\n  marbles: string,\n  values?: any,\n  error?: any,\n): TestColdObservable {\n  return new TestColdObservable(marbles.trim(), values, error);\n}\n\nexport function time(marbles: string): number {\n  return getTestScheduler().createTime(marbles.trim());\n}\n\ndeclare global {\n  namespace jasmine {\n    interface Matchers<T> {\n      toBeObservable(expected: TestObservable): boolean;\n      toHaveSubscriptions(marbles: string | string[]): boolean;\n    }\n  }\n  namespace jest {\n    interface Matchers<R> {\n      toBeObservable(expected: TestObservable): R;\n      toHaveSubscriptions(marbles: string | string[]): R;\n    }\n  }\n}\n\nexport function addMatchers() {\n  /**\n   * expect.extend is an API exposed by jest-circus,\n   * the default runner as of Jest v27. If that method\n   * is not available, assume we're in a Jasmine test\n   * environment.\n   */\n  if (!expect.extend) {\n    jasmine.addMatchers({\n      toHaveSubscriptions: () => ({\n        compare: toHaveSubscriptionsComparer,\n      }),\n      toBeObservable: (_utils) => ({\n        compare: toBeObservableComparer,\n      }),\n    });\n  } else {\n    expect.extend({\n      toHaveSubscriptions: toHaveSubscriptionsComparer,\n      toBeObservable: toBeObservableComparer,\n    });\n  }\n}\n\nexport function setupEnvironment() {\n  beforeAll(() => addMatchers());\n\n  beforeEach(() => initTestScheduler());\n  afterEach(() => {\n    getTestScheduler().flush();\n    resetTestScheduler();\n  });\n}\n\nsetupEnvironment();\n"]}