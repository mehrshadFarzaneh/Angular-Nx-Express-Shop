"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressComponentConfiguration = void 0;
const tslib_1 = require("tslib");
const cypress_1 = require("@nx/cypress");
const config_1 = require("@nx/cypress/src/utils/config");
const find_target_options_1 = require("@nx/cypress/src/utils/find-target-options");
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const component_test_1 = require("../component-test/component-test");
const component_info_1 = require("../utils/storybook-ast/component-info");
const entry_point_1 = require("../utils/storybook-ast/entry-point");
const module_info_1 = require("../utils/storybook-ast/module-info");
/**
 * This is for cypress built in component testing, if you want to test with
 * storybook + cypress then use the componentCypressGenerator instead.
 */
function cypressComponentConfiguration(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        const installTask = yield (0, cypress_1.cypressComponentConfiguration)(tree, {
            project: options.project,
            skipFormat: true,
        });
        yield updateProjectConfig(tree, options);
        yield addFiles(tree, projectConfig, options);
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return () => {
            installTask();
        };
    });
}
exports.cypressComponentConfiguration = cypressComponentConfiguration;
function addFiles(tree, projectConfig, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const cyConfigFile = (0, devkit_1.joinPathFragments)(projectConfig.root, 'cypress.config.ts');
        const updatedCyConfig = yield (0, config_1.addDefaultCTConfig)(tree.read(cyConfigFile, 'utf-8'));
        tree.write(cyConfigFile, `import { nxComponentTestingPreset } from '@nx/angular/plugins/component-testing';\n${updatedCyConfig}`);
        const componentFile = (0, devkit_1.joinPathFragments)(projectConfig.root, 'cypress', 'support', 'component.ts');
        const updatedCmpContents = yield (0, config_1.addMountDefinition)(tree.read(componentFile, 'utf-8'));
        tree.write(componentFile, `import { mount } from 'cypress/angular';\n${updatedCmpContents}`);
        if (options.generateTests) {
            const entryPoints = (0, entry_point_1.getProjectEntryPoints)(tree, options.project);
            const componentInfo = [];
            for (const entryPoint of entryPoints) {
                const moduleFilePaths = (0, module_info_1.getModuleFilePaths)(tree, entryPoint);
                componentInfo.push(...(0, component_info_1.getComponentsInfo)(tree, entryPoint, moduleFilePaths, options.project), ...(0, component_info_1.getStandaloneComponentsInfo)(tree, entryPoint));
            }
            for (const info of componentInfo) {
                if (info === undefined) {
                    continue;
                }
                const componentDirFromProjectRoot = (0, path_1.relative)(projectConfig.root, (0, devkit_1.joinPathFragments)(info.moduleFolderPath, info.path));
                (0, component_test_1.componentTestGenerator)(tree, {
                    project: options.project,
                    componentName: info.name,
                    componentDir: componentDirFromProjectRoot,
                    componentFileName: info.componentFileName,
                    skipFormat: true,
                });
            }
        }
    });
}
function updateProjectConfig(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const found = yield (0, find_target_options_1.findBuildConfig)(tree, {
            project: options.project,
            buildTarget: options.buildTarget,
            validExecutorNames: new Set([
                '@nx/angular:webpack-browser',
                '@nrwl/angular:webpack-browser',
                '@angular-devkit/build-angular:browser',
            ]),
        });
        assertValidConfig(found === null || found === void 0 ? void 0 : found.config);
        const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        projectConfig.targets['component-test'].options = Object.assign(Object.assign({}, projectConfig.targets['component-test'].options), { skipServe: true, devServerTarget: found.target });
        (0, devkit_1.updateProjectConfiguration)(tree, options.project, projectConfig);
    });
}
function assertValidConfig(config) {
    if (!config) {
        throw new Error('Unable to find a valid build configuration. Try passing in a target for an Angular app. --build-target=<project>:<target>[:<configuration>]');
    }
}
exports.default = cypressComponentConfiguration;
