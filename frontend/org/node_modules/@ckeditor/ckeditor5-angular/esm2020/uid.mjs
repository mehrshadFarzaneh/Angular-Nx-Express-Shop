/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */
// A copy of @ckeditor/ckeditor5-utils/src/uid.js
// A hash table of hex numbers to avoid using toString() in uid() which is costly.
// [ '00', '01', '02', ..., 'fe', 'ff' ]
const HEX_NUMBERS = new Array(256).fill(0)
    .map((val, index) => ('0' + (index).toString(16)).slice(-2));
/**
 * Returns a unique id. The id starts with an "e" character and a randomly generated string of
 * 32 alphanumeric characters.
 *
 * **Note**: The characters the unique id is built from correspond to the hex number notation
 * (from "0" to "9", from "a" to "f"). In other words, each id corresponds to an "e" followed
 * by 16 8-bit numbers next to each other.
 *
 * @returns An unique id string.
 */
export default function uid() {
    // Let's create some positive random 32bit integers first.
    //
    // 1. Math.random() is a float between 0 and 1.
    // 2. 0x100000000 is 2^32 = 4294967296.
    // 3. >>> 0 enforces integer (in JS all numbers are floating point).
    //
    // For instance:
    //		Math.random() * 0x100000000 = 3366450031.853859
    // but
    //		Math.random() * 0x100000000 >>> 0 = 3366450031.
    const r1 = Math.random() * 0x100000000 >>> 0;
    const r2 = Math.random() * 0x100000000 >>> 0;
    const r3 = Math.random() * 0x100000000 >>> 0;
    const r4 = Math.random() * 0x100000000 >>> 0;
    // Make sure that id does not start with number.
    return 'e' +
        HEX_NUMBERS[r1 >> 0 & 0xFF] +
        HEX_NUMBERS[r1 >> 8 & 0xFF] +
        HEX_NUMBERS[r1 >> 16 & 0xFF] +
        HEX_NUMBERS[r1 >> 24 & 0xFF] +
        HEX_NUMBERS[r2 >> 0 & 0xFF] +
        HEX_NUMBERS[r2 >> 8 & 0xFF] +
        HEX_NUMBERS[r2 >> 16 & 0xFF] +
        HEX_NUMBERS[r2 >> 24 & 0xFF] +
        HEX_NUMBERS[r3 >> 0 & 0xFF] +
        HEX_NUMBERS[r3 >> 8 & 0xFF] +
        HEX_NUMBERS[r3 >> 16 & 0xFF] +
        HEX_NUMBERS[r3 >> 24 & 0xFF] +
        HEX_NUMBERS[r4 >> 0 & 0xFF] +
        HEX_NUMBERS[r4 >> 8 & 0xFF] +
        HEX_NUMBERS[r4 >> 16 & 0xFF] +
        HEX_NUMBERS[r4 >> 24 & 0xFF];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NrZWRpdG9yL3VpZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxpREFBaUQ7QUFFakQsa0ZBQWtGO0FBQ2xGLHdDQUF3QztBQUN4QyxNQUFNLFdBQVcsR0FBRyxJQUFJLEtBQUssQ0FBRSxHQUFHLENBQUUsQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUFFO0tBQzVDLEdBQUcsQ0FBRSxDQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLENBQUUsR0FBRyxHQUFHLENBQUUsS0FBSyxDQUFFLENBQUMsUUFBUSxDQUFFLEVBQUUsQ0FBRSxDQUFFLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxDQUFFLENBQUUsQ0FBQztBQUUxRTs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLENBQUMsT0FBTyxVQUFVLEdBQUc7SUFDMUIsMERBQTBEO0lBQzFELEVBQUU7SUFDRiwrQ0FBK0M7SUFDL0MsdUNBQXVDO0lBQ3ZDLG9FQUFvRTtJQUNwRSxFQUFFO0lBQ0YsZ0JBQWdCO0lBQ2hCLG1EQUFtRDtJQUNuRCxNQUFNO0lBQ04sbURBQW1EO0lBQ25ELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEtBQUssQ0FBQyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEtBQUssQ0FBQyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEtBQUssQ0FBQyxDQUFDO0lBQzdDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEtBQUssQ0FBQyxDQUFDO0lBRTdDLGdEQUFnRDtJQUNoRCxPQUFPLEdBQUc7UUFDVCxXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUUsQ0FBQztBQUNqQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMywgQ0tTb3VyY2UgSG9sZGluZyBzcC4geiBvLm8uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZC5cbiAqL1xuXG4vLyBBIGNvcHkgb2YgQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvdWlkLmpzXG5cbi8vIEEgaGFzaCB0YWJsZSBvZiBoZXggbnVtYmVycyB0byBhdm9pZCB1c2luZyB0b1N0cmluZygpIGluIHVpZCgpIHdoaWNoIGlzIGNvc3RseS5cbi8vIFsgJzAwJywgJzAxJywgJzAyJywgLi4uLCAnZmUnLCAnZmYnIF1cbmNvbnN0IEhFWF9OVU1CRVJTID0gbmV3IEFycmF5KCAyNTYgKS5maWxsKCAwIClcblx0Lm1hcCggKCB2YWwsIGluZGV4ICkgPT4gKCAnMCcgKyAoIGluZGV4ICkudG9TdHJpbmcoIDE2ICkgKS5zbGljZSggLTIgKSApO1xuXG4vKipcbiAqIFJldHVybnMgYSB1bmlxdWUgaWQuIFRoZSBpZCBzdGFydHMgd2l0aCBhbiBcImVcIiBjaGFyYWN0ZXIgYW5kIGEgcmFuZG9tbHkgZ2VuZXJhdGVkIHN0cmluZyBvZlxuICogMzIgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuXG4gKlxuICogKipOb3RlKio6IFRoZSBjaGFyYWN0ZXJzIHRoZSB1bmlxdWUgaWQgaXMgYnVpbHQgZnJvbSBjb3JyZXNwb25kIHRvIHRoZSBoZXggbnVtYmVyIG5vdGF0aW9uXG4gKiAoZnJvbSBcIjBcIiB0byBcIjlcIiwgZnJvbSBcImFcIiB0byBcImZcIikuIEluIG90aGVyIHdvcmRzLCBlYWNoIGlkIGNvcnJlc3BvbmRzIHRvIGFuIFwiZVwiIGZvbGxvd2VkXG4gKiBieSAxNiA4LWJpdCBudW1iZXJzIG5leHQgdG8gZWFjaCBvdGhlci5cbiAqXG4gKiBAcmV0dXJucyBBbiB1bmlxdWUgaWQgc3RyaW5nLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1aWQoKTogc3RyaW5nIHtcblx0Ly8gTGV0J3MgY3JlYXRlIHNvbWUgcG9zaXRpdmUgcmFuZG9tIDMyYml0IGludGVnZXJzIGZpcnN0LlxuXHQvL1xuXHQvLyAxLiBNYXRoLnJhbmRvbSgpIGlzIGEgZmxvYXQgYmV0d2VlbiAwIGFuZCAxLlxuXHQvLyAyLiAweDEwMDAwMDAwMCBpcyAyXjMyID0gNDI5NDk2NzI5Ni5cblx0Ly8gMy4gPj4+IDAgZW5mb3JjZXMgaW50ZWdlciAoaW4gSlMgYWxsIG51bWJlcnMgYXJlIGZsb2F0aW5nIHBvaW50KS5cblx0Ly9cblx0Ly8gRm9yIGluc3RhbmNlOlxuXHQvL1x0XHRNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPSAzMzY2NDUwMDMxLjg1Mzg1OVxuXHQvLyBidXRcblx0Ly9cdFx0TWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwID4+PiAwID0gMzM2NjQ1MDAzMS5cblx0Y29uc3QgcjEgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDA7XG5cdGNvbnN0IHIyID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwID4+PiAwO1xuXHRjb25zdCByMyA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMDtcblx0Y29uc3QgcjQgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDA7XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgaWQgZG9lcyBub3Qgc3RhcnQgd2l0aCBudW1iZXIuXG5cdHJldHVybiAnZScgK1xuXHRcdEhFWF9OVU1CRVJTWyByMSA+PiAwICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjEgPj4gOCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHIxID4+IDE2ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjEgPj4gMjQgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByMiA+PiAwICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjIgPj4gOCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHIyID4+IDE2ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjIgPj4gMjQgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByMyA+PiAwICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjMgPj4gOCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHIzID4+IDE2ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjMgPj4gMjQgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByNCA+PiAwICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjQgPj4gOCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHI0ID4+IDE2ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjQgPj4gMjQgJiAweEZGIF07XG59XG4iXX0=