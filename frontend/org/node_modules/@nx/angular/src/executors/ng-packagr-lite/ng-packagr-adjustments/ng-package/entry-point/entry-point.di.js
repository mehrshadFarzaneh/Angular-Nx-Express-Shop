"use strict";
/**
 * Adapted from the original ng-packagr source.
 *
 * Changes made:
 * - Provide our own entryPointTransformFactory function.
 * - Use NX_COMPILE_NGC_TOKEN instead of COMPILE_NGC_TOKEN.
 * - Use NX_COMPILE_NGC_PROVIDERS instead of COMPILE_NGC_PROVIDERS.
 * - Removed usage of WRITE_BUNDLES_TRANSFORM_TOKEN and WRITE_BUNDLES_TRANSFORM.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NX_ENTRY_POINT_PROVIDERS = exports.NX_ENTRY_POINT_TRANSFORM = exports.NX_ENTRY_POINT_TRANSFORM_TOKEN = void 0;
const injection_js_1 = require("injection-js");
const transform_di_1 = require("ng-packagr/lib/graph/transform.di");
const compile_ngc_di_1 = require("./compile-ngc.di");
const entry_point_transform_1 = require("./entry-point.transform");
const write_package_di_1 = require("./write-package.di");
exports.NX_ENTRY_POINT_TRANSFORM_TOKEN = new injection_js_1.InjectionToken(`nx.v1.entryPointTransform`);
exports.NX_ENTRY_POINT_TRANSFORM = (0, transform_di_1.provideTransform)({
    provide: exports.NX_ENTRY_POINT_TRANSFORM_TOKEN,
    useFactory: entry_point_transform_1.nxEntryPointTransformFactory,
    deps: [compile_ngc_di_1.NX_COMPILE_NGC_TOKEN, write_package_di_1.NX_WRITE_PACKAGE_TRANSFORM_TOKEN],
});
exports.NX_ENTRY_POINT_PROVIDERS = [
    exports.NX_ENTRY_POINT_TRANSFORM,
    ...compile_ngc_di_1.NX_COMPILE_NGC_PROVIDERS,
    write_package_di_1.NX_WRITE_PACKAGE_TRANSFORM,
];
