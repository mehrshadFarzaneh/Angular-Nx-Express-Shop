"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppMigrator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const path_1 = require("path");
const utilities_1 = require("../../utilities");
const builders_1 = require("../builders");
const e2e_migrator_1 = require("./e2e.migrator");
const project_migrator_1 = require("./project.migrator");
const supportedTargets = {
    build: { builders: ['@angular-devkit/build-angular:browser'] },
    e2e: {
        acceptMultipleDefinitions: true,
        builders: [
            '@angular-devkit/build-angular:protractor',
            '@cypress/schematic:cypress',
        ],
    },
    i18n: { builders: ['@angular-devkit/build-angular:extract-i18n'] },
    prerender: { builders: ['@nguniversal/builders:prerender'] },
    serve: { builders: ['@angular-devkit/build-angular:dev-server'] },
    server: { builders: ['@angular-devkit/build-angular:server'] },
    serveSsr: { builders: ['@nguniversal/builders:ssr-dev-server'] },
};
// TODO(leo): this will replace `supportedTargets` once the full refactor is done.
const supportedBuilderMigrators = [
    builders_1.AngularDevkitKarmaMigrator,
    builders_1.AngularEslintLintMigrator,
];
class AppMigrator extends project_migrator_1.ProjectMigrator {
    constructor(tree, options, project, logger) {
        super(tree, options, supportedTargets, project, 'apps', logger, supportedBuilderMigrators);
        const eslintBuilderMigrator = this.builderMigrators[supportedBuilderMigrators.indexOf(builders_1.AngularEslintLintMigrator)];
        this.e2eMigrator = new e2e_migrator_1.E2eMigrator(tree, options, project, eslintBuilderMigrator.targets.size
            ? Object.keys(eslintBuilderMigrator.targets)[0]
            : undefined);
    }
    migrate() {
        const _super = Object.create(null, {
            migrate: { get: () => super.migrate }
        });
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.skipMigration === true) {
                return;
            }
            yield _super.migrate.call(this);
            this.updateProjectConfiguration();
            yield this.e2eMigrator.migrate();
            this.moveProjectFiles();
            this.updateProjectConfigurationTargets();
            for (const builderMigrator of (_a = this.builderMigrators) !== null && _a !== void 0 ? _a : []) {
                yield builderMigrator.migrate();
            }
            this.updateTsConfigs();
            this.setCacheableOperations();
        });
    }
    validate() {
        var _a, _b, _c;
        const errors = [
            ...((_a = super.validate()) !== null && _a !== void 0 ? _a : []),
            ...((_b = this.e2eMigrator.validate()) !== null && _b !== void 0 ? _b : []),
        ];
        for (const builderMigrator of this.builderMigrators) {
            errors.push(...((_c = builderMigrator.validate()) !== null && _c !== void 0 ? _c : []));
        }
        return errors.length ? errors : null;
    }
    moveProjectFiles() {
        // project is self-contained and can be safely moved
        if (this.project.oldRoot !== '') {
            this.moveDir(this.project.oldRoot, this.project.newRoot);
            return;
        }
        // we need to pick what to move because the project is in the workspace root
        // it is not required to have a browserslist
        this.moveProjectRootFile('browserslist', false);
        this.moveProjectRootFile('.browserslistrc', false);
        if (this.targetNames.build) {
            this.moveFilePathsFromTargetToProjectRoot(this.projectConfig.targets[this.targetNames.build], ['tsConfig', 'webWorkerTsConfig', 'ngswConfigPath']);
        }
        if (this.targetNames.server) {
            this.moveFilePathsFromTargetToProjectRoot(this.projectConfig.targets[this.targetNames.server], ['tsConfig']);
        }
        this.moveDir(this.project.oldSourceRoot, this.project.newSourceRoot);
    }
    setCacheableOperations() {
        const toCache = [];
        if (this.targetNames.build &&
            !this.shouldSkipTargetTypeMigration('build')) {
            toCache.push(this.targetNames.build);
        }
        if (this.targetNames.e2e && !this.shouldSkipTargetTypeMigration('e2e')) {
            toCache.push(this.targetNames.e2e);
        }
        if (toCache.length) {
            this.updateCacheableOperations(toCache);
        }
    }
    updateProjectConfiguration() {
        (0, utilities_1.convertToNxProject)(this.tree, this.project.name);
        this.moveFile((0, devkit_1.joinPathFragments)(this.project.oldRoot, 'project.json'), (0, devkit_1.joinPathFragments)(this.project.newRoot, 'project.json'));
        this.projectConfig.root = this.project.newRoot;
        this.projectConfig.sourceRoot = this.project.newSourceRoot;
        (0, devkit_1.updateProjectConfiguration)(this.tree, this.project.name, Object.assign({}, this.projectConfig));
    }
    updateProjectConfigurationTargets() {
        if (!this.projectConfig.targets ||
            !Object.keys(this.projectConfig.targets).length) {
            this.logger.warn('The project does not have any targets configured. Skipping updating targets.');
            return;
        }
        this.updateBuildTargetConfiguration();
        this.updateServerTargetConfiguration();
        this.updatePrerenderTargetConfiguration();
        this.updateServeSsrTargetConfiguration();
        (0, devkit_1.updateProjectConfiguration)(this.tree, this.project.name, Object.assign({}, this.projectConfig));
    }
    updateTsConfigs() {
        const rootTsConfigFile = (0, js_1.getRootTsConfigPathInTree)(this.tree);
        const projectOffsetFromRoot = (0, devkit_1.offsetFromRoot)(this.projectConfig.root);
        this.updateTsConfigFileUsedByBuildTarget(rootTsConfigFile, projectOffsetFromRoot);
        this.updateTsConfigFileUsedByServerTarget(projectOffsetFromRoot);
    }
    convertBuildOptions(buildOptions) {
        buildOptions.outputPath =
            buildOptions.outputPath &&
                (0, devkit_1.joinPathFragments)('dist', this.project.newRoot, this.targetNames.server ? 'browser' : '');
        buildOptions.index =
            buildOptions.index && this.convertAsset(buildOptions.index);
        buildOptions.main =
            buildOptions.main && this.convertAsset(buildOptions.main);
        buildOptions.polyfills =
            buildOptions.polyfills &&
                (Array.isArray(buildOptions.polyfills)
                    ? buildOptions.polyfills.map((asset) => this.convertAsset(asset))
                    : this.convertAsset(buildOptions.polyfills));
        buildOptions.tsConfig =
            buildOptions.tsConfig &&
                (0, devkit_1.joinPathFragments)(this.project.newRoot, (0, path_1.basename)(buildOptions.tsConfig));
        buildOptions.assets =
            buildOptions.assets &&
                buildOptions.assets.map((asset) => this.convertAsset(asset));
        buildOptions.styles =
            buildOptions.styles &&
                buildOptions.styles.map((style) => this.convertAsset(style));
        buildOptions.scripts =
            buildOptions.scripts &&
                buildOptions.scripts.map((script) => this.convertAsset(script));
        buildOptions.fileReplacements =
            buildOptions.fileReplacements &&
                buildOptions.fileReplacements.map((replacement) => ({
                    replace: this.convertAsset(replacement.replace),
                    with: this.convertAsset(replacement.with),
                }));
    }
    convertServerOptions(serverOptions) {
        serverOptions.outputPath =
            serverOptions.outputPath &&
                (0, devkit_1.joinPathFragments)('dist', this.project.newRoot, 'server');
        serverOptions.main =
            serverOptions.main && this.convertPath(serverOptions.main);
        serverOptions.tsConfig =
            serverOptions.tsConfig &&
                (0, devkit_1.joinPathFragments)(this.project.newRoot, (0, path_1.basename)(serverOptions.tsConfig));
        serverOptions.fileReplacements =
            serverOptions.fileReplacements &&
                serverOptions.fileReplacements.map((replacement) => ({
                    replace: this.convertAsset(replacement.replace),
                    with: this.convertAsset(replacement.with),
                }));
    }
    updateBuildTargetConfiguration() {
        var _a, _b, _c, _d, _e, _f;
        if (!this.targetNames.build) {
            this.logger.warn('There is no build target in the project configuration. Skipping updating the build target configuration.');
            return;
        }
        if (this.shouldSkipTargetTypeMigration('build')) {
            return;
        }
        const buildTarget = this.projectConfig.targets[this.targetNames.build];
        if (!buildTarget.options &&
            (!buildTarget.configurations ||
                !Object.keys(buildTarget.configurations).length)) {
            this.logger.warn(`The target "${this.targetNames.build}" is not specifying any options or configurations. Skipping updating the target configuration.`);
            return;
        }
        const buildDevTsConfig = (_b = (_a = buildTarget.options) === null || _a === void 0 ? void 0 : _a.tsConfig) !== null && _b !== void 0 ? _b : (_d = (_c = buildTarget.configurations) === null || _c === void 0 ? void 0 : _c.development) === null || _d === void 0 ? void 0 : _d.tsConfig;
        if (!buildDevTsConfig) {
            this.logger.warn(`The "${this.targetNames.build}" target does not have the "tsConfig" option configured. Skipping updating the tsConfig file.`);
        }
        else {
            const newBuildDevTsConfig = this.convertPath(buildDevTsConfig);
            if (!this.tree.exists(newBuildDevTsConfig)) {
                this.logger.warn(`The tsConfig file "${buildDevTsConfig}" specified in the "${this.targetNames.build}" target could not be found. Skipping updating the tsConfig file.`);
            }
        }
        this.convertBuildOptions((_e = buildTarget.options) !== null && _e !== void 0 ? _e : {});
        Object.values((_f = buildTarget.configurations) !== null && _f !== void 0 ? _f : {}).forEach((config) => this.convertBuildOptions(config));
    }
    updatePrerenderTargetConfiguration() {
        if (!this.targetNames.prerender ||
            this.shouldSkipTargetTypeMigration('prerender')) {
            return;
        }
        const prerenderTarget = this.projectConfig.targets[this.targetNames.prerender];
        if (!prerenderTarget.options) {
            this.logger.warn(`The target "${this.targetNames.prerender}" is not specifying any options. Skipping updating the target configuration.`);
            return;
        }
        prerenderTarget.options.routesFile =
            prerenderTarget.options.routesFile &&
                this.convertPath(prerenderTarget.options.routesFile);
    }
    updateServerTargetConfiguration() {
        var _a, _b, _c, _d, _e, _f;
        if (!this.targetNames.server ||
            this.shouldSkipTargetTypeMigration('server')) {
            return;
        }
        const serverTarget = this.projectConfig.targets[this.targetNames.server];
        if (!serverTarget.options &&
            (!serverTarget.configurations ||
                !Object.keys(serverTarget.configurations).length)) {
            this.logger.warn(`The target "${this.targetNames.server}" is not specifying any options or configurations. Skipping updating the target configuration.`);
            return;
        }
        const serverDevTsConfig = (_b = (_a = serverTarget.options) === null || _a === void 0 ? void 0 : _a.tsConfig) !== null && _b !== void 0 ? _b : (_d = (_c = serverTarget.configurations) === null || _c === void 0 ? void 0 : _c.development) === null || _d === void 0 ? void 0 : _d.tsConfig;
        if (!serverDevTsConfig) {
            this.logger.warn(`The "${this.targetNames.server}" target does not have the "tsConfig" option configured. Skipping updating the tsConfig file.`);
        }
        else {
            const newServerDevTsConfig = this.convertPath(serverDevTsConfig);
            if (!this.tree.exists(newServerDevTsConfig)) {
                this.logger.warn(`The tsConfig file "${serverDevTsConfig}" specified in the "${this.targetNames.server}" target could not be found. Skipping updating the tsConfig file.`);
            }
        }
        this.convertServerOptions((_e = serverTarget.options) !== null && _e !== void 0 ? _e : {});
        Object.values((_f = serverTarget.configurations) !== null && _f !== void 0 ? _f : {}).forEach((config) => this.convertServerOptions(config));
    }
    updateServeSsrTargetConfiguration() {
        if (!this.targetNames.serveSsr ||
            this.shouldSkipTargetTypeMigration('serveSsr')) {
            return;
        }
        const serveSsrTarget = this.projectConfig.targets[this.targetNames.serveSsr];
        if (!serveSsrTarget.options &&
            (!serveSsrTarget.configurations ||
                !Object.keys(serveSsrTarget.configurations).length)) {
            this.logger.warn(`The target "${this.targetNames.serveSsr}" is not specifying any options or configurations. Skipping updating the target configuration.`);
            return;
        }
        ['sslKey', 'sslCert', 'proxyConfig'].forEach((option) => {
            var _a;
            if (serveSsrTarget.options) {
                serveSsrTarget.options[option] =
                    serveSsrTarget.options[option] &&
                        this.convertPath(serveSsrTarget.options[option]);
            }
            for (const configuration of Object.values((_a = serveSsrTarget.configurations) !== null && _a !== void 0 ? _a : {})) {
                serveSsrTarget.configurations[configuration][option] =
                    serveSsrTarget.configurations[configuration][option] &&
                        this.convertPath(serveSsrTarget.configurations[configuration][option]);
            }
        });
    }
    updateTsConfigFileUsedByBuildTarget(rootTsConfigFile, projectOffsetFromRoot) {
        var _a, _b, _c, _d;
        if (!this.targetNames.build ||
            this.shouldSkipTargetTypeMigration('build')) {
            return;
        }
        const tsConfigPath = (_b = (_a = this.projectConfig.targets[this.targetNames.build].options) === null || _a === void 0 ? void 0 : _a.tsConfig) !== null && _b !== void 0 ? _b : (_d = (_c = this.projectConfig.targets[this.targetNames.build].configurations) === null || _c === void 0 ? void 0 : _c.development) === null || _d === void 0 ? void 0 : _d.tsConfig;
        if (!tsConfigPath || !this.tree.exists(tsConfigPath)) {
            // we already logged a warning for these cases, so just return
            return;
        }
        this.updateTsConfigFile(tsConfigPath, rootTsConfigFile, projectOffsetFromRoot);
    }
    updateTsConfigFileUsedByServerTarget(projectOffsetFromRoot) {
        var _a, _b, _c, _d;
        if (!this.targetNames.server ||
            this.shouldSkipTargetTypeMigration('server')) {
            return;
        }
        const tsConfigPath = (_b = (_a = this.projectConfig.targets[this.targetNames.server].options) === null || _a === void 0 ? void 0 : _a.tsConfig) !== null && _b !== void 0 ? _b : (_d = (_c = this.projectConfig.targets[this.targetNames.server].configurations) === null || _c === void 0 ? void 0 : _c.development) === null || _d === void 0 ? void 0 : _d.tsConfig;
        if (!tsConfigPath || !this.tree.exists(tsConfigPath)) {
            // we already logged a warning for these cases, so just return
            return;
        }
        (0, devkit_1.updateJson)(this.tree, tsConfigPath, (json) => {
            var _a;
            json.compilerOptions = (_a = json.compilerOptions) !== null && _a !== void 0 ? _a : {};
            json.compilerOptions.outDir = `${projectOffsetFromRoot}dist/out-tsc`;
            return json;
        });
    }
}
exports.AppMigrator = AppMigrator;
