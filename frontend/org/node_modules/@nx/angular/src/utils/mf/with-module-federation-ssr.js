"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withModuleFederationForSSR = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("./utils");
function withModuleFederationForSSR(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { sharedLibraries, sharedDependencies, mappedRemotes } = yield (0, utils_1.getModuleFederationConfig)(options, {
            isServer: true,
        });
        return (config) => {
            var _a, _b, _c, _d, _e, _f;
            return (Object.assign(Object.assign({}, (config !== null && config !== void 0 ? config : {})), { target: false, output: Object.assign(Object.assign({}, ((_a = config.output) !== null && _a !== void 0 ? _a : {})), { uniqueName: options.name }), optimization: Object.assign(Object.assign({}, ((_b = config.optimization) !== null && _b !== void 0 ? _b : {})), { runtimeChunk: false }), resolve: Object.assign(Object.assign({}, ((_c = config.resolve) !== null && _c !== void 0 ? _c : {})), { alias: Object.assign(Object.assign({}, ((_e = (_d = config.resolve) === null || _d === void 0 ? void 0 : _d.alias) !== null && _e !== void 0 ? _e : {})), sharedLibraries.getAliases()) }), plugins: [
                    ...((_f = config.plugins) !== null && _f !== void 0 ? _f : []),
                    new (require('@module-federation/node').UniversalFederationPlugin)({
                        name: options.name,
                        filename: 'remoteEntry.js',
                        exposes: options.exposes,
                        remotes: mappedRemotes,
                        shared: Object.assign({}, sharedDependencies),
                        library: {
                            type: 'commonjs-module',
                        },
                        isServer: true,
                    }, {}),
                    sharedLibraries.getReplacementPlugin(),
                ] }));
        };
    });
}
exports.withModuleFederationForSSR = withModuleFederationForSSR;
