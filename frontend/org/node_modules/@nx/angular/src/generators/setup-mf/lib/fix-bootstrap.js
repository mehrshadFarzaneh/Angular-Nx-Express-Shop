"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fixBootstrap = void 0;
const devkit_1 = require("@nx/devkit");
const version_utils_1 = require("../../utils/version-utils");
function fixBootstrap(tree, appRoot, options) {
    const mainFilePath = (0, devkit_1.joinPathFragments)(appRoot, 'src/main.ts');
    const bootstrapCode = tree.read(mainFilePath, 'utf-8');
    const installedAngularMajor = (0, version_utils_1.getInstalledAngularMajorVersion)(tree);
    if (options.standalone) {
        tree.write(`${appRoot}/src/bootstrap.ts`, standaloneBootstrapCode(installedAngularMajor === 14));
    }
    else {
        tree.write((0, devkit_1.joinPathFragments)(appRoot, 'src/bootstrap.ts'), bootstrapCode);
    }
    const bootstrapImportCode = `import('./bootstrap').catch(err => console.error(err))`;
    const fetchMFManifestCode = `import { setRemoteDefinitions } from '@nx/angular/mf';

  fetch('/assets/module-federation.manifest.json')
  .then((res) => res.json())
  .then(definitions => setRemoteDefinitions(definitions))
  .then(() => ${bootstrapImportCode})`;
    tree.write(mainFilePath, options.mfType === 'host' && options.federationType === 'dynamic'
        ? fetchMFManifestCode
        : bootstrapImportCode);
}
exports.fixBootstrap = fixBootstrap;
const standaloneBootstrapCode = (includeEnvironments = false) => `import {importProvidersFrom} from "@angular/core";
import {bootstrapApplication} from "@angular/platform-browser";
import {RouterModule} from "@angular/router";
import {RemoteEntryComponent} from "./app/remote-entry/entry.component";
import {appRoutes} from "./app/app.routes";
${includeEnvironments
    ? `import {enableProdMode} from '@angular/core';
import {environment} from './environments/environment';
if(environment.production) {
  enableProdMode();
}
`
    : ``}
bootstrapApplication(RemoteEntryComponent, {
  providers: [
    importProvidersFrom(
      RouterModule.forRoot(appRoutes, {initialNavigation: 'enabledBlocking'})
    )
  ]
});`;
