"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibMigrator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const devkit_2 = require("@nx/devkit");
const utilities_1 = require("../../utilities");
const builders_1 = require("../builders");
const project_migrator_1 = require("./project.migrator");
const supportedBuilderMigrators = [
    builders_1.AngularDevkitNgPackagrMigrator,
    builders_1.AngularDevkitKarmaMigrator,
    builders_1.AngularEslintLintMigrator,
];
class LibMigrator extends project_migrator_1.ProjectMigrator {
    constructor(tree, options, project, logger) {
        super(tree, options, {}, project, 'libs', logger, supportedBuilderMigrators);
    }
    migrate() {
        const _super = Object.create(null, {
            migrate: { get: () => super.migrate }
        });
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.skipMigration === true) {
                return;
            }
            yield _super.migrate.call(this);
            yield this.updateProjectConfiguration();
            this.moveProjectFiles();
            for (const builderMigrator of (_a = this.builderMigrators) !== null && _a !== void 0 ? _a : []) {
                yield builderMigrator.migrate();
            }
        });
    }
    validate() {
        var _a, _b;
        const errors = [...((_a = super.validate()) !== null && _a !== void 0 ? _a : [])];
        for (const builderMigrator of this.builderMigrators) {
            errors.push(...((_b = builderMigrator.validate()) !== null && _b !== void 0 ? _b : []));
        }
        return errors.length ? errors : null;
    }
    moveProjectFiles() {
        this.moveDir(this.project.oldRoot, this.project.newRoot);
    }
    updateProjectConfiguration() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            (0, utilities_1.convertToNxProject)(this.tree, this.project.name);
            this.moveFile((0, devkit_1.joinPathFragments)(this.project.oldRoot, 'project.json'), (0, devkit_1.joinPathFragments)(this.project.newRoot, 'project.json'));
            this.projectConfig.root = this.project.newRoot;
            this.projectConfig.sourceRoot = this.project.newSourceRoot;
            if (!this.projectConfig.targets ||
                !Object.keys(this.projectConfig.targets).length) {
                this.logger.warn('The project does not have any targets configured. This might not be an issue. Skipping updating targets.');
            }
            (0, devkit_2.updateProjectConfiguration)(this.tree, this.project.name, Object.assign({}, this.projectConfig));
        });
    }
}
exports.LibMigrator = LibMigrator;
