"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const ts = require("typescript");
const workspace_models_1 = require("@schematics/angular/utility/workspace-models");
const executor_options_utils_1 = require("@nx/devkit/src/generators/executor-options-utils");
const file_change_recorder_1 = require("../../utils/file-change-recorder");
function default_1(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        for (const file of findTestMainFiles(tree)) {
            updateTestFile(tree, file);
        }
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = default_1;
function findTestMainFiles(tree) {
    const testFiles = new Set();
    // find all test.ts files.
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, workspace_models_1.Builders.Karma, (options) => {
        if (typeof options.main === 'string' && tree.exists(options.main)) {
            testFiles.add(options.main);
        }
    });
    return testFiles;
}
function updateTestFile(tree, file) {
    const content = tree.read(file, 'utf8');
    if (!content.includes('require.context')) {
        return;
    }
    const sourceFile = ts.createSourceFile(file, content.replace(/^\uFEFF/, ''), ts.ScriptTarget.Latest, true);
    const usedVariableNames = new Set();
    const recorder = new file_change_recorder_1.FileChangeRecorder(tree, sourceFile.fileName);
    ts.forEachChild(sourceFile, (node) => {
        var _a, _b;
        if (ts.isVariableStatement(node)) {
            const variableDeclaration = node.declarationList.declarations[0];
            if ((_a = ts
                .getModifiers(node)) === null || _a === void 0 ? void 0 : _a.some((m) => m.kind === ts.SyntaxKind.DeclareKeyword)) {
                // `declare const require`
                if (variableDeclaration.name.getText() !== 'require') {
                    return;
                }
            }
            else {
                // `const context = require.context('./', true, /\.spec\.ts$/);`
                if (!((_b = variableDeclaration.initializer) === null || _b === void 0 ? void 0 : _b.getText().startsWith('require.context'))) {
                    return;
                }
                // add variable name as used.
                usedVariableNames.add(variableDeclaration.name.getText());
            }
            // Delete node.
            recorder.remove(node.getFullStart(), node.getFullStart() + node.getFullWidth());
        }
        if (usedVariableNames.size &&
            ts.isExpressionStatement(node) && // context.keys().map(context);
            ts.isCallExpression(node.expression) && // context.keys().map(context);
            ts.isPropertyAccessExpression(node.expression.expression) && // context.keys().map
            ts.isCallExpression(node.expression.expression.expression) && // context.keys()
            ts.isPropertyAccessExpression(node.expression.expression.expression.expression) && // context.keys
            ts.isIdentifier(node.expression.expression.expression.expression.expression) && // context
            usedVariableNames.has(node.expression.expression.expression.expression.expression.getText())) {
            // `context.keys().map(context);`
            // `context.keys().forEach(context);`
            recorder.remove(node.getFullStart(), node.getFullStart() + node.getFullWidth());
        }
    });
    recorder.applyChanges();
}
