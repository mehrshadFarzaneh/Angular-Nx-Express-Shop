{"version":3,"file":"compile-source-files.js","sourceRoot":"","sources":["../../../src/lib/ngc/compile-source-files.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yCAAiC;AACjC,4DAA4B;AAE5B,+CAAqG;AAGrG,mEAA4F;AAC5F,kDAAoC;AACpC,8DAAyD;AAElD,KAAK,UAAU,kBAAkB,CACtC,KAAiB,EACjB,QAA6B,EAC7B,qBAA+C,EAC/C,OAAyB,EACzB,YAAuC,EACvC,mBAAyC;;IAEzC,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAE,GAAG,MAAM,IAAA,+BAAa,GAAE,CAAC;IAClE,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC;IACxD,MAAM,eAAe,GAAoB,EAAE,GAAG,QAAQ,CAAC,OAAO,EAAE,GAAG,YAAY,EAAE,CAAC;IAClF,MAAM,UAAU,GAAmB,KAAK,CAAC,IAAI,CAAC,IAAA,8BAAsB,GAAE,CAAC,CAAC;IACxE,MAAM,aAAa,GAAgB,KAAK,CAAC,IAAI,CAAC,iBAAS,CAAC,CAAC;IACzD,MAAM,mBAAmB,GAAG,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC;IAEnE,MAAM,QAAQ,GAAG,YAAY,IAAI,cAAc,CAAC;IAChD,IAAI,QAAQ,EAAE;QACZ,MAAA,eAAe,CAAC,WAAW,oCAA3B,eAAe,CAAC,WAAW,GAAK,IAAI,EAAC;QACrC,MAAA,eAAe,CAAC,eAAe,oCAA/B,eAAe,CAAC,eAAe,GAAK,IAAA,gBAAI,EACtC,QAAQ,EACR,eAAe,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,cAAc,CACvE,EAAC;KACH;IAED,MAAM,YAAY,GAAG,IAAI,GAAG,EAAU,CAAC;IACvC,MAAM,cAAc,GAAG,IAAA,uCAAiB,EACtC,KAAK,EACL,UAAU,EACV,eAAe,EACf,qBAAqB,EACrB,YAAY,EACZ,mBAAmB,EACnB,mBAAmB,CACpB,CAAC;IAEF,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;IAC/B,MAAM,eAAe,GAAG,KAAK,CAAC,gBAAgB,CAAC;IAC/C,IAAI,cAAc,GAAG,KAAK,CAAC;IAE3B,IAAI,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;IAClC,IAAI,CAAC,UAAU,IAAI,QAAQ,EAAE;QAC3B,UAAU,GAAG,oBAAE,CAAC,kBAAkB,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;QACpE,cAAc,GAAG,IAAI,CAAC;KACvB;IAED,yEAAyE;IACzE,MAAM,cAAc,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,EAAE,eAAe,EAAE,cAAc,EAAE,KAAK,CAAC,eAAe,CAAC,CAAC;IAEpH,MAAM,eAAe,GAAG,cAAc,CAAC,QAAQ,CAAC;IAChD,MAAM,EAAE,oBAAoB,EAAE,aAAa,EAAE,GAAG,eAAe,CAAC;IAEhE,yDAAyD;IACzD,0FAA0F;IAC1F,MAAM,iBAAiB,GAAG,cAAc,CAAC,YAAY,EAAE,CAAC;IACxD,IAAA,kDAA4B,EAAC,iBAAiB,CAAC,CAAC;IAEhD,IAAI,OAAwE,CAAC;IAC7E,IAAI,KAAK,IAAI,QAAQ,EAAE;QACrB,OAAO,GAAG,KAAK,CAAC,UAAU,GAAG,oBAAE,CAAC,8CAA8C,CAC5E,iBAAiB,EACjB,cAAc,EACd,UAAU,CACX,CAAC;QACF,KAAK,CAAC,eAAe,GAAG,cAAc,CAAC;KACxC;SAAM;QACL,yFAAyF;QACzF,kEAAkE;QAClE,OAAO,GAAG,oBAAE,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC;KACvE;IAED,oCAAoC;IACpC,MAAM,aAAa,GAAG,IAAI,GAAG,EAAiB,CAAC;IAE/C,0EAA0E;IAC1E,IAAI,0CAA0C,IAAI,OAAO,EAAE;QACzD,iDAAiD;QACjD,OAAO,IAAI,EAAE;YACX,MAAM,MAAM,GAAG,OAAO,CAAC,wCAAwC,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE;gBACtF,2EAA2E;gBAC3E,kFAAkF;gBAClF,0FAA0F;gBAC1F,yFAAyF;gBACzF,YAAY;gBACZ,IAAI,oBAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;oBAC3F,sFAAsF;oBACtF,0EAA0E;oBAC1E,MAAM,gBAAgB,GAAG,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;oBACnE,MAAM,kBAAkB,GAAG,OAAO,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;oBACnE,IAAI,kBAAkB,EAAE;wBACtB,aAAa,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;qBACvC;oBAED,OAAO,IAAI,CAAC;iBACb;gBAED,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM;aACP;YAED,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,QAAyB,CAAC,CAAC;SACrD;QAED,8DAA8D;QAC9D,+GAA+G;QAC/G,gHAAgH;QAChH,mBAAmB;QACnB,IAAI,cAAc,EAAE;YAClB,KAAK,MAAM,UAAU,IAAI,OAAO,CAAC,cAAc,EAAE,EAAE;gBACjD,IAAI,oBAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;oBAC3F,sFAAsF;oBACtF,0EAA0E;oBAC1E,MAAM,gBAAgB,GAAG,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;oBACnE,MAAM,kBAAkB,GAAG,OAAO,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;oBACnE,IAAI,kBAAkB,EAAE;wBACtB,aAAa,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;qBACvC;iBACF;aACF;SACF;KACF;IAED,oCAAoC;IACpC,MAAM,cAAc,GAAoB;QACtC,GAAG,eAAe,CAAC,oBAAoB,EAAE;QACzC,GAAG,OAAO,CAAC,qBAAqB,EAAE;QAClC,GAAG,OAAO,CAAC,oBAAoB,EAAE;KAClC,CAAC;IAEF,oDAAoD;IACpD,4EAA4E;IAC5E,MAAM,eAAe,CAAC,YAAY,EAAE,CAAC;IAErC,2CAA2C;IAC3C,KAAK,MAAM,UAAU,IAAI,OAAO,CAAC,cAAc,EAAE,EAAE;QACjD,IAAI,oBAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACxC,SAAS;SACV;QAED,cAAc,CAAC,IAAI,CACjB,GAAG,OAAO,CAAC,yBAAyB,CAAC,UAAU,CAAC,EAChD,GAAG,OAAO,CAAC,uBAAuB,CAAC,UAAU,CAAC,EAC9C,GAAG,OAAO,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAC9C,CAAC;QAEF,qDAAqD;QACrD,IAAI,UAAU,CAAC,iBAAiB,EAAE;YAChC,SAAS;SACV;QAED,wEAAwE;QACxE,wDAAwD;QACxD,IAAI,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACjC,MAAM,kBAAkB,GAAG,eAAe,CAAC,qBAAqB,CAC9D,UAAU,EACV,aAAa,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,8BAA8B,CAAC,CAAC,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAChG,CAAC;YAEF,cAAc,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,CAAC;YAC3C,eAAe,CAAC,wBAAwB,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;SAC1E;KACF;IAED,MAAM,gBAAgB,GAAG,EAAE,CAAC;IAC5B,MAAM,gBAAgB,GAAG,EAAE,CAAC;IAC5B,KAAK,MAAM,UAAU,IAAI,cAAc,EAAE;QACvC,IAAI,UAAU,CAAC,QAAQ,KAAK,oBAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE;YACvD,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACnC;aAAM;YACL,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACnC;KACF;IAED,IAAI,gBAAgB,CAAC,MAAM,EAAE;QAC3B,GAAG,CAAC,GAAG,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC;KAC9C;IAED,MAAM,YAAY,GAAG,eAAe,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC;IAChE,IAAI,0CAA0C,IAAI,OAAO,EAAE;QACzD,6EAA6E;QAC7E,OAAO,OAAO,CAAC,oBAAoB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,CAAC,EAAE;YAClF,QAAQ;SACT;KACF;IAED,IAAI,gBAAgB,CAAC,MAAM,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC;KACtD;IAED,KAAK,MAAM,UAAU,IAAI,OAAO,CAAC,cAAc,EAAE,EAAE;QACjD,IAAI,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACjC,SAAS;SACV;QAED,IAAI,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;YACzC,eAAe,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;YACxE,SAAS;SACV;QAED,IAAI,eAAe,CAAC,sBAAsB,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;YACrE,SAAS;SACV;QAED,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;QACxE,eAAe,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;KACzE;AACH,CAAC;AAhND,gDAgNC","sourcesContent":["import { CompilerOptions, ParsedConfiguration } from '@angular/compiler-cli';\nimport { join } from 'node:path';\nimport ts from 'typescript';\nimport { BuildGraph } from '../graph/build-graph';\nimport { EntryPointNode, PackageNode, isEntryPointInProgress, isPackage } from '../ng-package/nodes';\nimport { NgPackagrOptions } from '../ng-package/options.di';\nimport { StylesheetProcessor } from '../styles/stylesheet-processor';\nimport { augmentProgramWithVersioning, cacheCompilerHost } from '../ts/cache-compiler-host';\nimport * as log from '../utils/log';\nimport { ngCompilerCli } from '../utils/ng-compiler-cli';\n\nexport async function compileSourceFiles(\n  graph: BuildGraph,\n  tsConfig: ParsedConfiguration,\n  moduleResolutionCache: ts.ModuleResolutionCache,\n  options: NgPackagrOptions,\n  extraOptions?: Partial<CompilerOptions>,\n  stylesheetProcessor?: StylesheetProcessor,\n) {\n  const { NgtscProgram, formatDiagnostics } = await ngCompilerCli();\n  const { cacheDirectory, watch, cacheEnabled } = options;\n  const tsConfigOptions: CompilerOptions = { ...tsConfig.options, ...extraOptions };\n  const entryPoint: EntryPointNode = graph.find(isEntryPointInProgress());\n  const ngPackageNode: PackageNode = graph.find(isPackage);\n  const inlineStyleLanguage = ngPackageNode.data.inlineStyleLanguage;\n\n  const cacheDir = cacheEnabled && cacheDirectory;\n  if (cacheDir) {\n    tsConfigOptions.incremental ??= true;\n    tsConfigOptions.tsBuildInfoFile ??= join(\n      cacheDir,\n      `tsbuildinfo/${entryPoint.data.entryPoint.flatModuleFile}.tsbuildinfo`,\n    );\n  }\n\n  const emittedFiles = new Set<string>();\n  const tsCompilerHost = cacheCompilerHost(\n    graph,\n    entryPoint,\n    tsConfigOptions,\n    moduleResolutionCache,\n    emittedFiles,\n    stylesheetProcessor,\n    inlineStyleLanguage,\n  );\n\n  const cache = entryPoint.cache;\n  const sourceFileCache = cache.sourcesFileCache;\n  let usingBuildInfo = false;\n\n  let oldBuilder = cache.oldBuilder;\n  if (!oldBuilder && cacheDir) {\n    oldBuilder = ts.readBuilderProgram(tsConfigOptions, tsCompilerHost);\n    usingBuildInfo = true;\n  }\n\n  // Create the Angular specific program that contains the Angular compiler\n  const angularProgram = new NgtscProgram(tsConfig.rootNames, tsConfigOptions, tsCompilerHost, cache.oldNgtscProgram);\n\n  const angularCompiler = angularProgram.compiler;\n  const { ignoreForDiagnostics, ignoreForEmit } = angularCompiler;\n\n  // SourceFile versions are required for builder programs.\n  // The wrapped host inside NgtscProgram adds additional files that will not have versions.\n  const typeScriptProgram = angularProgram.getTsProgram();\n  augmentProgramWithVersioning(typeScriptProgram);\n\n  let builder: ts.BuilderProgram | ts.EmitAndSemanticDiagnosticsBuilderProgram;\n  if (watch || cacheDir) {\n    builder = cache.oldBuilder = ts.createEmitAndSemanticDiagnosticsBuilderProgram(\n      typeScriptProgram,\n      tsCompilerHost,\n      oldBuilder,\n    );\n    cache.oldNgtscProgram = angularProgram;\n  } else {\n    // When not in watch mode, the startup cost of the incremental analysis can be avoided by\n    // using an abstract builder that only wraps a TypeScript program.\n    builder = ts.createAbstractBuilder(typeScriptProgram, tsCompilerHost);\n  }\n\n  // Update semantic diagnostics cache\n  const affectedFiles = new Set<ts.SourceFile>();\n\n  // Analyze affected files when in watch mode for incremental type checking\n  if ('getSemanticDiagnosticsOfNextAffectedFile' in builder) {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const result = builder.getSemanticDiagnosticsOfNextAffectedFile(undefined, sourceFile => {\n        // If the affected file is a TTC shim, add the shim's original source file.\n        // This ensures that changes that affect TTC are typechecked even when the changes\n        // are otherwise unrelated from a TS perspective and do not result in Ivy codegen changes.\n        // For example, changing @Input property types of a directive used in another component's\n        // template.\n        if (ignoreForDiagnostics.has(sourceFile) && sourceFile.fileName.endsWith('.ngtypecheck.ts')) {\n          // This file name conversion relies on internal compiler logic and should be converted\n          // to an official method when available. 15 is length of `.ngtypecheck.ts`\n          const originalFilename = sourceFile.fileName.slice(0, -15) + '.ts';\n          const originalSourceFile = builder.getSourceFile(originalFilename);\n          if (originalSourceFile) {\n            affectedFiles.add(originalSourceFile);\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n\n      if (!result) {\n        break;\n      }\n\n      affectedFiles.add(result.affected as ts.SourceFile);\n    }\n\n    // Add all files with associated template type checking files.\n    // Stored TS build info does not have knowledge of the AOT compiler or the typechecking state of the templates.\n    // To ensure that errors are reported correctly, all AOT component diagnostics need to be analyzed even if build\n    // info is present.\n    if (usingBuildInfo) {\n      for (const sourceFile of builder.getSourceFiles()) {\n        if (ignoreForDiagnostics.has(sourceFile) && sourceFile.fileName.endsWith('.ngtypecheck.ts')) {\n          // This file name conversion relies on internal compiler logic and should be converted\n          // to an official method when available. 15 is length of `.ngtypecheck.ts`\n          const originalFilename = sourceFile.fileName.slice(0, -15) + '.ts';\n          const originalSourceFile = builder.getSourceFile(originalFilename);\n          if (originalSourceFile) {\n            affectedFiles.add(originalSourceFile);\n          }\n        }\n      }\n    }\n  }\n\n  // Collect program level diagnostics\n  const allDiagnostics: ts.Diagnostic[] = [\n    ...angularCompiler.getOptionDiagnostics(),\n    ...builder.getOptionsDiagnostics(),\n    ...builder.getGlobalDiagnostics(),\n  ];\n\n  // Required to support asynchronous resource loading\n  // Must be done before creating transformers or getting template diagnostics\n  await angularCompiler.analyzeAsync();\n\n  // Collect source file specific diagnostics\n  for (const sourceFile of builder.getSourceFiles()) {\n    if (ignoreForDiagnostics.has(sourceFile)) {\n      continue;\n    }\n\n    allDiagnostics.push(\n      ...builder.getDeclarationDiagnostics(sourceFile),\n      ...builder.getSyntacticDiagnostics(sourceFile),\n      ...builder.getSemanticDiagnostics(sourceFile),\n    );\n\n    // Declaration files cannot have template diagnostics\n    if (sourceFile.isDeclarationFile) {\n      continue;\n    }\n\n    // Only request Angular template diagnostics for affected files to avoid\n    // overhead of template diagnostics for unchanged files.\n    if (affectedFiles.has(sourceFile)) {\n      const angularDiagnostics = angularCompiler.getDiagnosticsForFile(\n        sourceFile,\n        affectedFiles.size === 1 ? /** OptimizeFor.SingleFile **/ 0 : /** OptimizeFor.WholeProgram */ 1,\n      );\n\n      allDiagnostics.push(...angularDiagnostics);\n      sourceFileCache.updateAngularDiagnostics(sourceFile, angularDiagnostics);\n    }\n  }\n\n  const otherDiagnostics = [];\n  const errorDiagnostics = [];\n  for (const diagnostic of allDiagnostics) {\n    if (diagnostic.category === ts.DiagnosticCategory.Error) {\n      errorDiagnostics.push(diagnostic);\n    } else {\n      otherDiagnostics.push(diagnostic);\n    }\n  }\n\n  if (otherDiagnostics.length) {\n    log.msg(formatDiagnostics(errorDiagnostics));\n  }\n\n  const transformers = angularCompiler.prepareEmit().transformers;\n  if ('getSemanticDiagnosticsOfNextAffectedFile' in builder) {\n    // TypeScript will loop until there are no more affected files in the program\n    while (builder.emitNextAffectedFile(undefined, undefined, undefined, transformers)) {\n      // empty\n    }\n  }\n\n  if (errorDiagnostics.length) {\n    throw new Error(formatDiagnostics(errorDiagnostics));\n  }\n\n  for (const sourceFile of builder.getSourceFiles()) {\n    if (ignoreForEmit.has(sourceFile)) {\n      continue;\n    }\n\n    if (emittedFiles.has(sourceFile.fileName)) {\n      angularCompiler.incrementalCompilation.recordSuccessfulEmit(sourceFile);\n      continue;\n    }\n\n    if (angularCompiler.incrementalCompilation.safeToSkipEmit(sourceFile)) {\n      continue;\n    }\n\n    builder.emit(sourceFile, undefined, undefined, undefined, transformers);\n    angularCompiler.incrementalCompilation.recordSuccessfulEmit(sourceFile);\n  }\n}\n"]}