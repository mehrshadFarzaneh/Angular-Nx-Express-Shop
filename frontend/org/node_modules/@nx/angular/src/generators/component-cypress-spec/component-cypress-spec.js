"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentCypressSpecGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const storybook_inputs_1 = require("../utils/storybook-ast/storybook-inputs");
const get_args_default_value_1 = require("./lib/get-args-default-value");
const get_component_selector_1 = require("./lib/get-component-selector");
function componentCypressSpecGenerator(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { cypressProject, projectName, projectPath, componentPath, componentFileName, componentName, specDirectory, } = options;
        const e2eProjectName = cypressProject || `${projectName}-e2e`;
        const { sourceRoot, root } = (0, devkit_1.readProjectConfiguration)(tree, e2eProjectName);
        const isCypressV10 = tree.exists((0, devkit_1.joinPathFragments)(root, 'cypress.config.ts'));
        const e2eLibIntegrationFolderPath = (0, devkit_1.joinPathFragments)(sourceRoot, isCypressV10 ? 'e2e' : 'integration');
        const templatesDir = (0, devkit_1.joinPathFragments)(__dirname, 'files');
        const destinationDir = (0, devkit_1.joinPathFragments)(e2eLibIntegrationFolderPath, specDirectory !== null && specDirectory !== void 0 ? specDirectory : componentPath);
        const storyFile = (0, devkit_1.joinPathFragments)(destinationDir, `${componentFileName}.${isCypressV10 ? 'cy' : 'spec'}.ts`);
        if (tree.exists(storyFile)) {
            return;
        }
        const fullComponentPath = (0, devkit_1.joinPathFragments)(projectPath, componentPath, `${componentFileName}.ts`);
        const props = (0, storybook_inputs_1.getComponentProps)(tree, fullComponentPath, get_args_default_value_1.getArgsDefaultValue);
        const componentSelector = (0, get_component_selector_1.getComponentSelector)(tree, fullComponentPath);
        (0, devkit_1.generateFiles)(tree, templatesDir, destinationDir, {
            projectName,
            componentFileName,
            componentName,
            componentSelector,
            props,
            fileExt: isCypressV10 ? 'cy.ts' : 'spec.ts',
        });
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
    });
}
exports.componentCypressSpecGenerator = componentCypressSpecGenerator;
exports.default = componentCypressSpecGenerator;
