{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "SCAMGenerator",
  "cli": "nx",
  "title": "SCAM Generator Options Schema",
  "type": "object",
  "examples": [
    {
      "command": "nx g @nx/angular:scam --project=my-lib my-sample",
      "description": "Generate a `MySampleComponent` component in the `my-lib` library."
    }
  ],
  "description": "Creates a new, generic Angular component definition in the given or default project.",
  "additionalProperties": false,
  "properties": {
    "path": {
      "type": "string",
      "format": "path",
      "description": "The path at which to create the component file, relative to the current workspace. Default is a folder with the same name as the component in the project root.",
      "visible": false
    },
    "project": {
      "type": "string",
      "description": "The name of the project.",
      "$default": {
        "$source": "projectName"
      },
      "x-dropdown": "projects"
    },
    "name": {
      "type": "string",
      "description": "The name of the component.",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use for the component?"
    },
    "displayBlock": {
      "description": "Specifies if the style will contain `:host { display: block; }`.",
      "type": "boolean",
      "default": false,
      "alias": "b"
    },
    "inlineStyle": {
      "description": "Include styles inline in the `component.ts` file. Only CSS styles can be included inline. By default, an external styles file is created and referenced in the `component.ts` file.",
      "type": "boolean",
      "default": false,
      "alias": "s"
    },
    "inlineTemplate": {
      "description": "Include template inline in the `component.ts` file. By default, an external template file is created and referenced in the `component.ts` file.",
      "type": "boolean",
      "default": false,
      "alias": "t"
    },
    "viewEncapsulation": {
      "description": "The view encapsulation strategy to use in the new component.",
      "enum": ["Emulated", "None", "ShadowDom"],
      "type": "string",
      "alias": "v"
    },
    "changeDetection": {
      "description": "The change detection strategy to use in the new component.",
      "enum": ["Default", "OnPush"],
      "type": "string",
      "default": "Default",
      "alias": "c"
    },
    "style": {
      "description": "The file extension or preprocessor to use for style files, or 'none' to skip generating the style file.",
      "type": "string",
      "default": "css",
      "enum": ["css", "scss", "sass", "less", "none"]
    },
    "skipTests": {
      "type": "boolean",
      "description": "Do not create `spec.ts` test files for the new component.",
      "default": false
    },
    "inlineScam": {
      "type": "boolean",
      "description": "Create the `NgModule` in the same file as the component.",
      "default": true,
      "x-priority": "important"
    },
    "flat": {
      "type": "boolean",
      "description": "Create the new files at the top level of the current project.",
      "default": false
    },
    "selector": {
      "type": "string",
      "format": "html-selector",
      "description": "The `HTML` selector to use for this component."
    },
    "skipSelector": {
      "type": "boolean",
      "default": false,
      "description": "Specifies if the component should have a selector or not."
    },
    "type": {
      "type": "string",
      "description": "Adds a developer-defined type to the filename, in the format `name.type.ts`.",
      "default": "component"
    },
    "prefix": {
      "type": "string",
      "description": "The prefix to apply to the generated component selector.",
      "alias": "p",
      "oneOf": [
        {
          "maxLength": 0
        },
        {
          "minLength": 1,
          "format": "html-selector"
        }
      ]
    },
    "export": {
      "type": "boolean",
      "description": "Specifies if the SCAM should be exported from the project's entry point (normally `index.ts`). It only applies to libraries.",
      "default": true,
      "x-priority": "important"
    },
    "skipFormat": {
      "type": "boolean",
      "description": "Skip formatting files.",
      "default": false,
      "x-priority": "internal"
    }
  },
  "required": ["name", "project"]
}
