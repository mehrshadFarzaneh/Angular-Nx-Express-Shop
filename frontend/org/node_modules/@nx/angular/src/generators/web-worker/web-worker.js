"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.webWorkerGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const lib_1 = require("./lib");
const js_1 = require("@nx/js");
function webWorkerGenerator(tree, rawOptions) {
    var _a, _b;
    var _c, _d;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = (0, lib_1.normalizeOptions)(tree, rawOptions);
        const workerNames = (0, devkit_1.names)(options.name);
        const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        const substitutions = {
            rootOffset: (0, devkit_1.offsetFromRoot)(projectConfig.root),
            rootTsConfig: (0, js_1.getRelativePathToRootTsConfig)(tree, projectConfig.root),
            name: workerNames.fileName,
            tpl: '',
        };
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, './files/worker'), options.path, substitutions);
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, './files/config'), projectConfig.root, substitutions);
        if (options.snippet) {
            (0, lib_1.addSnippet)(tree, workerNames.fileName, options.path);
        }
        (_a = (_c = projectConfig.targets['build'].options).webWorkerTsConfig) !== null && _a !== void 0 ? _a : (_c.webWorkerTsConfig = (0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.worker.json'));
        if (projectConfig.targets['test']) {
            (_b = (_d = projectConfig.targets['test'].options).webWorkerTsConfig) !== null && _b !== void 0 ? _b : (_d.webWorkerTsConfig = (0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.worker.json'));
        }
        (0, devkit_1.updateProjectConfiguration)(tree, options.project, projectConfig);
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
    });
}
exports.webWorkerGenerator = webWorkerGenerator;
exports.default = webWorkerGenerator;
