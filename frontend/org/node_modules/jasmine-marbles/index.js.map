{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";;;AAAA,6CAIyB;AAEzB,2DAIgC;AAEhC,qCAGqB;AAErB,6CAIyB;AAHvB,6GAAA,gBAAgB,OAAA;AAChB,8GAAA,iBAAiB,OAAA;AACjB,+GAAA,kBAAkB,OAAA;AAGpB,SAAgB,GAAG,CACjB,OAAe,EACf,MAAY,EACZ,KAAW;IAEX,OAAO,IAAI,oCAAiB,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAC9D,CAAC;AAND,kBAMC;AAED,SAAgB,IAAI,CAClB,OAAe,EACf,MAAY,EACZ,KAAW;IAEX,OAAO,IAAI,qCAAkB,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAC/D,CAAC;AAND,oBAMC;AAED,SAAgB,IAAI,CAAC,OAAe;IAClC,OAAO,4BAAgB,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AACvD,CAAC;AAFD,oBAEC;AAiBD,SAAgB,WAAW;IACzB;;;;;OAKG;IACH,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QAClB,OAAO,CAAC,WAAW,CAAC;YAClB,mBAAmB,EAAE,cAAM,OAAA,CAAC;gBAC1B,OAAO,EAAE,mCAA2B;aACrC,CAAC,EAFyB,CAEzB;YACF,cAAc,EAAE,UAAC,MAAM,IAAK,OAAA,CAAC;gBAC3B,OAAO,EAAE,8BAAsB;aAChC,CAAC,EAF0B,CAE1B;SACH,CAAC,CAAC;KACJ;SAAM;QACL,MAAM,CAAC,MAAM,CAAC;YACZ,mBAAmB,EAAE,mCAA2B;YAChD,cAAc,EAAE,8BAAsB;SACvC,CAAC,CAAC;KACJ;AACH,CAAC;AAtBD,kCAsBC;AAED,SAAgB,gBAAgB;IAC9B,SAAS,CAAC,cAAM,OAAA,WAAW,EAAE,EAAb,CAAa,CAAC,CAAC;IAE/B,UAAU,CAAC,cAAM,OAAA,6BAAiB,EAAE,EAAnB,CAAmB,CAAC,CAAC;IACtC,SAAS,CAAC;QACR,4BAAgB,EAAE,CAAC,KAAK,EAAE,CAAC;QAC3B,8BAAkB,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC;AARD,4CAQC;AAED,gBAAgB,EAAE,CAAC","sourcesContent":["import {\n  getTestScheduler,\n  initTestScheduler,\n  resetTestScheduler,\n} from './src/scheduler';\n\nimport {\n  TestColdObservable,\n  TestHotObservable,\n  TestObservable,\n} from './src/test-observables';\n\nimport {\n  toHaveSubscriptionsComparer,\n  toBeObservableComparer,\n} from './src/utils';\n\nexport {\n  getTestScheduler,\n  initTestScheduler,\n  resetTestScheduler,\n} from './src/scheduler';\n\nexport function hot(\n  marbles: string,\n  values?: any,\n  error?: any,\n): TestHotObservable {\n  return new TestHotObservable(marbles.trim(), values, error);\n}\n\nexport function cold(\n  marbles: string,\n  values?: any,\n  error?: any,\n): TestColdObservable {\n  return new TestColdObservable(marbles.trim(), values, error);\n}\n\nexport function time(marbles: string): number {\n  return getTestScheduler().createTime(marbles.trim());\n}\n\ndeclare global {\n  namespace jasmine {\n    interface Matchers<T> {\n      toBeObservable(expected: TestObservable): boolean;\n      toHaveSubscriptions(marbles: string | string[]): boolean;\n    }\n  }\n  namespace jest {\n    interface Matchers<R> {\n      toBeObservable(expected: TestObservable): R;\n      toHaveSubscriptions(marbles: string | string[]): R;\n    }\n  }\n}\n\nexport function addMatchers() {\n  /**\n   * expect.extend is an API exposed by jest-circus,\n   * the default runner as of Jest v27. If that method\n   * is not available, assume we're in a Jasmine test\n   * environment.\n   */\n  if (!expect.extend) {\n    jasmine.addMatchers({\n      toHaveSubscriptions: () => ({\n        compare: toHaveSubscriptionsComparer,\n      }),\n      toBeObservable: (_utils) => ({\n        compare: toBeObservableComparer,\n      }),\n    });\n  } else {\n    expect.extend({\n      toHaveSubscriptions: toHaveSubscriptionsComparer,\n      toBeObservable: toBeObservableComparer,\n    });\n  }\n}\n\nexport function setupEnvironment() {\n  beforeAll(() => addMatchers());\n\n  beforeEach(() => initTestScheduler());\n  afterEach(() => {\n    getTestScheduler().flush();\n    resetTestScheduler();\n  });\n}\n\nsetupEnvironment();\n"]}