import type { Tree } from '@nx/devkit';
import type { Linter } from 'eslint';
import type { AddLintingGeneratorSchema } from '../schema';
type EslintExtensionSchema = {
    prefix: string;
};
export declare const extendAngularEslintJson: (json: Linter.Config, options: EslintExtensionSchema) => {
    overrides: ({
        files: string[];
        extends: string[];
        rules: {
            '@angular-eslint/directive-selector': (string | {
                type: string;
                prefix: string;
                style: string;
            })[];
            '@angular-eslint/component-selector': (string | {
                type: string;
                prefix: string;
                style: string;
            })[];
        };
        excludedFiles?: string | string[];
        $schema?: string;
        env?: {
            [name: string]: boolean;
        };
        globals?: {
            [name: string]: boolean | "readonly" | "readable" | "writable" | "writeable";
        };
        noInlineConfig?: boolean;
        overrides?: Linter.ConfigOverride<Linter.RulesRecord>[];
        parser?: string;
        parserOptions?: Linter.ParserOptions;
        plugins?: string[];
        processor?: string;
        reportUnusedDisableDirectives?: boolean;
        settings?: {
            [name: string]: any;
        };
    } | {
        files: string[];
        extends: string[];
        /**
         * Having an empty rules object present makes it more obvious to the user where they would
         * extend things from if they needed to
         */
        rules: {
            '@angular-eslint/directive-selector'?: undefined;
            '@angular-eslint/component-selector'?: undefined;
        };
    })[];
    ignorePatterns?: string | string[];
    root?: boolean;
    $schema?: string;
    env?: {
        [name: string]: boolean;
    };
    extends?: string | string[];
    globals?: {
        [name: string]: boolean | "readonly" | "readable" | "writable" | "writeable";
    };
    noInlineConfig?: boolean;
    parser?: string;
    parserOptions?: Linter.ParserOptions;
    plugins?: string[];
    processor?: string;
    reportUnusedDisableDirectives?: boolean;
    settings?: {
        [name: string]: any;
    };
    rules?: Partial<Linter.RulesRecord>;
};
/**
 * @deprecated Use {@link extendAngularEslintJson} instead
 */
export declare function createEsLintConfiguration(tree: Tree, options: AddLintingGeneratorSchema): void;
export {};
