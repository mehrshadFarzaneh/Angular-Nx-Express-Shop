{"version":3,"file":"stylesheet-processor-worker.js","sourceRoot":"","sources":["../../../src/lib/styles/stylesheet-processor-worker.ts"],"names":[],"mappings":"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","sourcesContent":["import autoprefixer from 'autoprefixer';\nimport { extname, relative } from 'node:path';\nimport { pathToFileURL } from 'node:url';\nimport { workerData } from 'node:worker_threads';\nimport postcss from 'postcss';\nimport postcssUrl from 'postcss-url';\nimport { EsbuildExecutor } from '../esbuild/esbuild-executor';\nimport { generateKey, readCacheEntry, saveCacheEntry } from '../utils/cache';\nimport * as log from '../utils/log';\nimport { CssUrl } from './stylesheet-processor';\n\nconst { tailwindConfigPath, projectBasePath, browserslistData, targets, cssUrl, styleIncludePaths } = workerData as {\n  tailwindConfigPath: string | undefined;\n  browserslistData: string;\n  targets: string[];\n  projectBasePath: string;\n  cssUrl: CssUrl;\n  styleIncludePaths: string[];\n  cacheDirectory: string | undefined;\n};\n\nlet cacheDirectory = workerData.cacheDirectory;\nlet postCssProcessor: ReturnType<typeof postcss>;\nlet esbuild: EsbuildExecutor;\n\ninterface RenderRequest {\n  content: string;\n  filePath: string;\n}\n\nconst CACHE_KEY_VALUES = [...browserslistData, ...styleIncludePaths, cssUrl].join(':');\n\nasync function render({ content, filePath }: RenderRequest): Promise<string> {\n  let key: string | undefined;\n  if (cacheDirectory && !content.includes('@import') && !content.includes('@use')) {\n    // No transitive deps, we can cache more aggressively.\n    key = await generateKey(content, CACHE_KEY_VALUES);\n    const result = await readCacheEntry(cacheDirectory, key);\n    if (result) {\n      result.warnings.forEach(msg => log.warn(msg));\n\n      return result.css;\n    }\n  }\n\n  // Render pre-processor language (sass, styl, less)\n  const renderedCss = await renderCss(filePath, content);\n\n  // We cannot cache CSS re-rendering phase, because a transitive dependency via (@import) can case different CSS output.\n  // Example a change in a mixin or SCSS variable.\n  if (!key) {\n    key = await generateKey(renderedCss, CACHE_KEY_VALUES);\n  }\n\n  if (cacheDirectory) {\n    const cachedResult = await readCacheEntry(cacheDirectory, key);\n    if (cachedResult) {\n      cachedResult.warnings.forEach(msg => log.warn(msg));\n\n      return cachedResult.css;\n    }\n  }\n\n  // Render postcss (autoprefixing and friends)\n  const result = await postCssProcessor.process(renderedCss, {\n    from: filePath,\n    to: filePath.replace(extname(filePath), '.css'),\n  });\n\n  const warnings = result.warnings().map(w => w.toString());\n  const { code, warnings: esBuildWarnings } = await esbuild.transform(result.css, {\n    loader: 'css',\n    minify: true,\n    target: targets,\n    sourcefile: filePath,\n  });\n\n  if (esBuildWarnings.length > 0) {\n    warnings.push(...(await esbuild.formatMessages(esBuildWarnings, { kind: 'warning' })));\n  }\n\n  if (cacheDirectory) {\n    await saveCacheEntry(\n      cacheDirectory,\n      key,\n      JSON.stringify({\n        css: code,\n        warnings,\n      }),\n    );\n  }\n\n  warnings.forEach(msg => log.warn(msg));\n\n  return code;\n}\n\nasync function renderCss(filePath: string, css: string): Promise<string> {\n  const ext = extname(filePath);\n\n  switch (ext) {\n    case '.sass':\n    case '.scss': {\n      return (await import('sass')).compileString(css, {\n        url: pathToFileURL(filePath),\n        syntax: '.sass' === ext ? 'indented' : 'scss',\n        loadPaths: styleIncludePaths,\n      }).css;\n    }\n    case '.less': {\n      const { css: content } = await (\n        await import('less')\n      ).default.render(css, {\n        filename: filePath,\n        math: 'always',\n        javascriptEnabled: true,\n        paths: styleIncludePaths,\n      });\n\n      return content;\n    }\n\n    case '.css':\n    default:\n      return css;\n  }\n}\n\nfunction getTailwindPlugin() {\n  // Attempt to setup Tailwind CSS\n  // Only load Tailwind CSS plugin if configuration file was found.\n  // This acts as a guard to ensure the project actually wants to use Tailwind CSS.\n  // The package may be unknowningly present due to a third-party transitive package dependency.\n  if (tailwindConfigPath) {\n    let tailwindPackagePath;\n    try {\n      tailwindPackagePath = require.resolve('tailwindcss', { paths: [projectBasePath] });\n    } catch {\n      const relativeTailwindConfigPath = relative(projectBasePath, tailwindConfigPath);\n      log.warn(\n        `Tailwind CSS configuration file found (${relativeTailwindConfigPath})` +\n          ` but the 'tailwindcss' package is not installed.` +\n          ` To enable Tailwind CSS, please install the 'tailwindcss' package.`,\n      );\n    }\n\n    if (tailwindPackagePath) {\n      return require(tailwindPackagePath)({ config: tailwindConfigPath });\n    }\n  }\n}\n\nasync function initialize() {\n  const postCssPlugins = [];\n  const tailwinds = getTailwindPlugin();\n  if (tailwinds) {\n    postCssPlugins.push(tailwinds);\n    cacheDirectory = undefined;\n  }\n\n  if (cssUrl !== CssUrl.none) {\n    postCssPlugins.push(postcssUrl({ url: cssUrl }));\n  }\n\n  postCssPlugins.push(\n    autoprefixer({\n      ignoreUnknownVersions: true,\n      overrideBrowserslist: browserslistData,\n    }),\n  );\n\n  postCssProcessor = postcss(postCssPlugins);\n\n  esbuild = new EsbuildExecutor();\n\n  // Return the render function for use\n  return render;\n}\n\n/**\n * The default export will be the promise returned by the initialize function.\n * This is awaited by piscina prior to using the Worker.\n */\nexport default initialize();\n"]}