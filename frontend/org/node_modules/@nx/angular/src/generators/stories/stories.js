"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.angularStoriesGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const component_cypress_spec_1 = require("../component-cypress-spec/component-cypress-spec");
const component_story_1 = require("../component-story/component-story");
const component_info_1 = require("../utils/storybook-ast/component-info");
const entry_point_1 = require("../utils/storybook-ast/entry-point");
const get_e2e_project_1 = require("./lib/get-e2e-project");
const module_info_1 = require("../utils/storybook-ast/module-info");
const minimatch = require("minimatch");
function angularStoriesGenerator(tree, options) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const e2eProjectName = (_a = options.cypressProject) !== null && _a !== void 0 ? _a : `${options.name}-e2e`;
        const e2eProject = (0, get_e2e_project_1.getE2EProject)(tree, e2eProjectName);
        const entryPoints = (0, entry_point_1.getProjectEntryPoints)(tree, options.name);
        const componentsInfo = [];
        for (const entryPoint of entryPoints) {
            const moduleFilePaths = (0, module_info_1.getModuleFilePaths)(tree, entryPoint);
            componentsInfo.push(...(0, component_info_1.getComponentsInfo)(tree, entryPoint, moduleFilePaths, options.name), ...(0, component_info_1.getStandaloneComponentsInfo)(tree, entryPoint));
        }
        if (options.generateCypressSpecs && !e2eProject) {
            devkit_1.logger.info(`There was no e2e project "${e2eProjectName}" found, so cypress specs will not be generated. Pass "--cypressProject" to specify a different e2e project name.`);
        }
        const componentInfos = componentsInfo.filter((f) => {
            var _a;
            return !((_a = options.ignorePaths) === null || _a === void 0 ? void 0 : _a.some((pattern) => {
                const shouldIgnorePath = minimatch((0, devkit_1.joinPathFragments)(f.moduleFolderPath, f.path, `${f.componentFileName}.ts`), pattern);
                return shouldIgnorePath;
            }));
        });
        for (const info of componentInfos) {
            if (info === undefined) {
                continue;
            }
            yield (0, component_story_1.default)(tree, {
                projectPath: info.moduleFolderPath,
                componentName: info.name,
                componentPath: info.path,
                componentFileName: info.componentFileName,
                skipFormat: true,
            });
            if (options.generateCypressSpecs && e2eProject) {
                yield (0, component_cypress_spec_1.default)(tree, {
                    projectName: options.name,
                    projectPath: info.moduleFolderPath,
                    cypressProject: options.cypressProject,
                    componentName: info.name,
                    componentPath: info.path,
                    componentFileName: info.componentFileName,
                    specDirectory: (0, devkit_1.joinPathFragments)(info.entryPointName, info.path),
                    skipFormat: true,
                });
            }
        }
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
    });
}
exports.angularStoriesGenerator = angularStoriesGenerator;
exports.default = angularStoriesGenerator;
