"use strict";
/**
 * Adapted from a private function at ng-packagr
 * https://github.com/ng-packagr/ng-packagr/blob/main/src/lib/ts/tsconfig.ts#L12:
 *
 * Changes made:
 * - Added an extra function that updates the configFilePath in the returned parsed options
 * to be the original tsconfig file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseRemappedTsConfigAndMergeDefaults = void 0;
const tslib_1 = require("tslib");
const ng_compiler_cli_1 = require("ng-packagr/lib/utils/ng-compiler-cli");
const path_1 = require("path");
const ts = require("typescript");
function readDefaultTsConfig(fileName) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // these options are mandatory
        const extraOptions = {
            target: ts.ScriptTarget.ES2020,
            experimentalDecorators: true,
            // sourcemaps
            sourceMap: false,
            inlineSources: true,
            inlineSourceMap: true,
            outDir: '',
            declaration: true,
            // ng compiler to options
            enableResourceInlining: true,
            // these are required to set the appropriate EmitFlags
            flatModuleId: 'AUTOGENERATED',
            flatModuleOutFile: 'AUTOGENERATED',
        };
        const { readConfiguration } = yield (0, ng_compiler_cli_1.ngCompilerCli)();
        return readConfiguration(fileName, extraOptions);
    });
}
/**
 * Proxy function that ensures the configFilePath option points to the original file path.
 */
function parseRemappedTsConfigAndMergeDefaults(workspaceRoot, originalFilePath, remappedFilePath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const parsedConfiguration = yield readDefaultTsConfig(remappedFilePath);
        parsedConfiguration.options.configFilePath = (0, path_1.resolve)(workspaceRoot, originalFilePath);
        return parsedConfiguration;
    });
}
exports.parseRemappedTsConfigAndMergeDefaults = parseRemappedTsConfigAndMergeDefaults;
