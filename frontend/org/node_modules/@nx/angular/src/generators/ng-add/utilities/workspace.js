"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteGitKeepFilesIfNotNeeded = exports.deleteAngularJson = exports.updateVsCodeRecommendedExtensions = exports.getWorkspaceRootFileTypesInfo = exports.createRootKarmaConfig = exports.createWorkspaceFiles = exports.cleanupEsLintPackages = exports.updateRootEsLintConfig = exports.updatePackageJson = exports.updateRootTsConfig = exports.updateWorkspaceConfigDefaults = exports.createNxJson = exports.validateWorkspace = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const linter_1 = require("@nx/linter");
const js_1 = require("@nx/js");
const default_base_1 = require("nx/src/utils/default-base");
const versions_1 = require("@nx/js/src/utils/versions");
const angular_json_1 = require("nx/src/adapter/angular-json");
const versions_2 = require("../../../utils/versions");
function validateWorkspace(tree) {
    const errors = [];
    if (!tree.exists('package.json')) {
        errors.push('The "package.json" file could not be found.');
    }
    if (!tree.exists('angular.json')) {
        errors.push('The "angular.json" file could not be found.');
    }
    if (!errors.length) {
        return;
    }
    throw new Error(`The workspace cannot be migrated because of the following issues:

  - ${errors.join('\n  ')}`);
}
exports.validateWorkspace = validateWorkspace;
function createNxJson(tree, options, defaultProject) {
    var _a;
    const targets = getWorkspaceCommonTargets(tree);
    (0, devkit_1.writeJson)(tree, 'nx.json', {
        affected: {
            defaultBase: (_a = options.defaultBase) !== null && _a !== void 0 ? _a : (0, default_base_1.deduceDefaultBase)(),
        },
        tasksRunnerOptions: {
            default: {
                runner: 'nx/tasks-runners/default',
                options: {
                    cacheableOperations: [
                        'build',
                        targets.test ? 'test' : undefined,
                        targets.lint ? 'lint' : undefined,
                        targets.e2e ? 'e2e' : undefined,
                    ].filter(Boolean),
                },
            },
        },
        namedInputs: {
            sharedGlobals: [],
            default: ['{projectRoot}/**/*', 'sharedGlobals'],
            production: [
                'default',
                ...(targets.test
                    ? [
                        '!{projectRoot}/tsconfig.spec.json',
                        '!{projectRoot}/**/*.spec.[jt]s',
                        '!{projectRoot}/karma.conf.js',
                    ]
                    : []),
                targets.lint ? '!{projectRoot}/.eslintrc.json' : undefined,
            ].filter(Boolean),
        },
        targetDefaults: {
            build: {
                dependsOn: ['^build'],
                inputs: ['production', '^production'],
            },
            test: targets.test
                ? {
                    inputs: ['default', '^production', '{workspaceRoot}/karma.conf.js'],
                }
                : undefined,
            lint: targets.lint
                ? {
                    inputs: ['default', '{workspaceRoot}/.eslintrc.json'],
                }
                : undefined,
            e2e: targets.e2e
                ? {
                    inputs: ['default', '^production'],
                }
                : undefined,
        },
        defaultProject,
    });
}
exports.createNxJson = createNxJson;
function getWorkspaceCommonTargets(tree) {
    var _a, _b, _c;
    const targets = { e2e: false, lint: false, test: false };
    const projects = (0, devkit_1.getProjects)(tree);
    for (const [, project] of projects) {
        if (!targets.e2e && ((_a = project.targets) === null || _a === void 0 ? void 0 : _a.e2e)) {
            targets.e2e = true;
        }
        if (!targets.lint && ((_b = project.targets) === null || _b === void 0 ? void 0 : _b.lint)) {
            targets.lint = true;
        }
        if (!targets.test && ((_c = project.targets) === null || _c === void 0 ? void 0 : _c.test)) {
            targets.test = true;
        }
        if (targets.e2e && targets.lint && targets.test) {
            return targets;
        }
    }
    return targets;
}
function updateWorkspaceConfigDefaults(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    delete nxJson.newProjectRoot;
    if (nxJson.cli) {
        delete nxJson.defaultCollection;
    }
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
exports.updateWorkspaceConfigDefaults = updateWorkspaceConfigDefaults;
function updateRootTsConfig(tree) {
    var _a, _b;
    var _c;
    const tsconfig = (0, devkit_1.readJson)(tree, (0, js_1.getRootTsConfigPathInTree)(tree));
    (_a = (_c = tsconfig.compilerOptions).paths) !== null && _a !== void 0 ? _a : (_c.paths = {});
    tsconfig.compilerOptions.baseUrl = '.';
    tsconfig.compilerOptions.rootDir = '.';
    tsconfig.exclude = Array.from(new Set([...((_b = tsconfig.exclude) !== null && _b !== void 0 ? _b : []), 'node_modules', 'tmp']));
    (0, devkit_1.writeJson)(tree, 'tsconfig.base.json', tsconfig);
    if (tree.exists('tsconfig.json')) {
        tree.delete('tsconfig.json');
    }
}
exports.updateRootTsConfig = updateRootTsConfig;
function updatePackageJson(tree) {
    (0, devkit_1.updateJson)(tree, 'package.json', (packageJson) => {
        var _a, _b, _c;
        packageJson.scripts = (_a = packageJson.scripts) !== null && _a !== void 0 ? _a : {};
        Object.keys(packageJson.scripts).forEach((script) => {
            packageJson.scripts[script] = packageJson.scripts[script]
                .replace(/^ng /, 'nx ')
                .replace(/ ng /, ' nx ');
        });
        packageJson.devDependencies = (_b = packageJson.devDependencies) !== null && _b !== void 0 ? _b : {};
        packageJson.dependencies = (_c = packageJson.dependencies) !== null && _c !== void 0 ? _c : {};
        if (!packageJson.devDependencies['@angular/cli']) {
            packageJson.devDependencies['@angular/cli'] = versions_2.angularDevkitVersion;
        }
        if (!packageJson.devDependencies['@nx/workspace'] &&
            !packageJson.devDependencies['@nrwl/workspace']) {
            packageJson.devDependencies['@nx/workspace'] = versions_2.nxVersion;
        }
        if (!packageJson.devDependencies['nx']) {
            packageJson.devDependencies['nx'] = versions_2.nxVersion;
        }
        if (!packageJson.devDependencies['prettier']) {
            packageJson.devDependencies['prettier'] = versions_1.prettierVersion;
        }
        return packageJson;
    });
}
exports.updatePackageJson = updatePackageJson;
function updateRootEsLintConfig(tree, existingEsLintConfig, unitTestRunner) {
    var _a, _b, _c, _d;
    if (tree.exists('.eslintrc.json')) {
        /**
         * If it still exists it means that there was no project at the root of the
         * workspace, so it was not moved. In that case, we remove the file so the
         * init generator do its work. We still receive the content of the file,
         * so we update it after the init generator has run.
         */
        tree.delete('.eslintrc.json');
    }
    (0, linter_1.lintInitGenerator)(tree, { linter: linter_1.Linter.EsLint, unitTestRunner });
    if (!existingEsLintConfig) {
        // There was no eslint config in the root, so we keep the generated one as-is.
        return;
    }
    existingEsLintConfig.ignorePatterns = ['**/*'];
    if (!((_a = existingEsLintConfig.plugins) !== null && _a !== void 0 ? _a : []).includes('@nrwl/nx')) {
        existingEsLintConfig.plugins = Array.from(new Set([...((_b = existingEsLintConfig.plugins) !== null && _b !== void 0 ? _b : []), '@nx']));
    }
    (_c = existingEsLintConfig.overrides) === null || _c === void 0 ? void 0 : _c.forEach((override) => {
        var _a;
        if (!((_a = override.parserOptions) === null || _a === void 0 ? void 0 : _a.project)) {
            return;
        }
        delete override.parserOptions.project;
    });
    // add the @nx/enforce-module-boundaries rule
    existingEsLintConfig.overrides = [
        ...((_d = existingEsLintConfig.overrides) !== null && _d !== void 0 ? _d : []),
        {
            files: ['*.ts', '*.tsx', '*.js', '*.jsx'],
            rules: {
                '@nx/enforce-module-boundaries': [
                    'error',
                    {
                        enforceBuildableLibDependency: true,
                        allow: [],
                        depConstraints: [
                            { sourceTag: '*', onlyDependOnLibsWithTags: ['*'] },
                        ],
                    },
                ],
            },
        },
    ];
    (0, devkit_1.writeJson)(tree, '.eslintrc.json', existingEsLintConfig);
}
exports.updateRootEsLintConfig = updateRootEsLintConfig;
function cleanupEsLintPackages(tree) {
    (0, devkit_1.updateJson)(tree, 'package.json', (json) => {
        var _a, _b, _c, _d;
        if ((_a = json.devDependencies) === null || _a === void 0 ? void 0 : _a['@angular-eslint/builder']) {
            delete json.devDependencies['@angular-eslint/builder'];
        }
        if ((_b = json.dependencies) === null || _b === void 0 ? void 0 : _b['@angular-eslint/builder']) {
            delete json.dependencies['@angular-eslint/builder'];
        }
        if ((_c = json.devDependencies) === null || _c === void 0 ? void 0 : _c['@angular-eslint/schematics']) {
            delete json.devDependencies['@angular-eslint/schematics'];
        }
        if ((_d = json.dependencies) === null || _d === void 0 ? void 0 : _d['@angular-eslint/schematics']) {
            delete json.dependencies['@angular-eslint/schematics'];
        }
        return json;
    });
}
exports.cleanupEsLintPackages = cleanupEsLintPackages;
function createWorkspaceFiles(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        updateVsCodeRecommendedExtensions(tree);
        yield (0, js_1.initGenerator)(tree, { skipFormat: true });
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/root'), '.', {
            tmpl: '',
            dot: '.',
            rootTsConfigPath: (0, js_1.getRootTsConfigPathInTree)(tree),
        });
    });
}
exports.createWorkspaceFiles = createWorkspaceFiles;
function createRootKarmaConfig(tree) {
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/root-karma'), '.', {
        tmpl: '',
    });
}
exports.createRootKarmaConfig = createRootKarmaConfig;
function getWorkspaceRootFileTypesInfo(tree, migrators) {
    const workspaceRootFileTypesInfo = {
        eslint: false,
        karma: false,
    };
    if (tree.exists('.eslintrc.json')) {
        workspaceRootFileTypesInfo.eslint = true;
    }
    if (tree.exists('karma.conf.js')) {
        workspaceRootFileTypesInfo.karma = true;
    }
    if (workspaceRootFileTypesInfo.eslint && workspaceRootFileTypesInfo.karma) {
        return workspaceRootFileTypesInfo;
    }
    for (const migrator of migrators) {
        const projectInfo = migrator.getWorkspaceRootFileTypesInfo();
        workspaceRootFileTypesInfo.eslint =
            workspaceRootFileTypesInfo.eslint || projectInfo.eslint;
        workspaceRootFileTypesInfo.karma =
            workspaceRootFileTypesInfo.karma || projectInfo.karma;
        if (workspaceRootFileTypesInfo.eslint && workspaceRootFileTypesInfo.karma) {
            return workspaceRootFileTypesInfo;
        }
    }
    return workspaceRootFileTypesInfo;
}
exports.getWorkspaceRootFileTypesInfo = getWorkspaceRootFileTypesInfo;
function updateVsCodeRecommendedExtensions(tree) {
    const recommendations = [
        'nrwl.angular-console',
        'angular.ng-template',
        'dbaeumer.vscode-eslint',
        'esbenp.prettier-vscode',
    ];
    if (tree.exists('.vscode/extensions.json')) {
        (0, devkit_1.updateJson)(tree, '.vscode/extensions.json', (json) => {
            json.recommendations = json.recommendations || [];
            recommendations.forEach((extension) => {
                if (!json.recommendations.includes(extension)) {
                    json.recommendations.push(extension);
                }
            });
            return json;
        });
    }
    else {
        (0, devkit_1.writeJson)(tree, '.vscode/extensions.json', {
            recommendations,
        });
    }
}
exports.updateVsCodeRecommendedExtensions = updateVsCodeRecommendedExtensions;
function deleteAngularJson(tree) {
    const projects = (0, angular_json_1.toNewFormat)((0, devkit_1.readJson)(tree, 'angular.json')).projects;
    if (!Object.keys(projects).length) {
        tree.delete('angular.json');
    }
}
exports.deleteAngularJson = deleteAngularJson;
function deleteGitKeepFilesIfNotNeeded(tree) {
    if (tree.children('apps').length > 1 && tree.exists('apps/.gitkeep')) {
        tree.delete('apps/.gitkeep');
    }
    if (tree.children('libs').length > 1 && tree.exists('libs/.gitkeep')) {
        tree.delete('libs/.gitkeep');
    }
}
exports.deleteGitKeepFilesIfNotNeeded = deleteGitKeepFilesIfNotNeeded;
