"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const utils_1 = require("../utils");
const lib_1 = require("./lib");
function componentGenerator(tree, rawOptions) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        (0, lib_1.validateOptions)(tree, rawOptions);
        const options = (0, lib_1.normalizeOptions)(tree, rawOptions);
        const componentNames = (0, devkit_1.names)(options.name);
        const typeNames = (0, devkit_1.names)(options.type);
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, 'files'), options.directory, {
            fileName: componentNames.fileName,
            className: componentNames.className,
            type: typeNames.fileName,
            typeClassName: typeNames.className,
            style: options.style,
            inlineStyle: options.inlineStyle,
            inlineTemplate: options.inlineTemplate,
            standalone: options.standalone,
            skipSelector: options.skipSelector,
            changeDetection: options.changeDetection,
            viewEncapsulation: options.viewEncapsulation,
            displayBlock: options.displayBlock,
            selector: options.selector,
            tpl: '',
        });
        if (options.skipTests) {
            const pathToSpecFile = (0, devkit_1.joinPathFragments)(options.directory, `${componentNames.fileName}.${typeNames.fileName}.spec.ts`);
            tree.delete(pathToSpecFile);
        }
        if (options.inlineTemplate) {
            const pathToTemplateFile = (0, devkit_1.joinPathFragments)(options.directory, `${componentNames.fileName}.${typeNames.fileName}.html`);
            tree.delete(pathToTemplateFile);
        }
        if (options.inlineStyle) {
            const pathToStyleFile = (0, devkit_1.joinPathFragments)(options.directory, `${componentNames.fileName}.${typeNames.fileName}.${options.style}`);
            tree.delete(pathToStyleFile);
        }
        if (!options.skipImport && !options.standalone) {
            const modulePath = (0, lib_1.findModuleFromOptions)(tree, options, options.projectRoot);
            (0, utils_1.addToNgModule)(tree, options.path, modulePath, componentNames.fileName, `${componentNames.className}${typeNames.className}`, `${componentNames.fileName}.${typeNames.fileName}`, 'declarations', options.flat, options.export);
        }
        (0, lib_1.exportComponentInEntryPoint)(tree, options);
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
    });
}
exports.componentGenerator = componentGenerator;
exports.default = componentGenerator;
