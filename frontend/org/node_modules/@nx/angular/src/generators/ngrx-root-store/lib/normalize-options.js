"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = void 0;
const devkit_1 = require("@nx/devkit");
const semver_1 = require("@nx/devkit/src/utils/semver");
const versions_1 = require("../../../utils/versions");
const ast_utils_1 = require("../../../utils/nx-devkit/ast-utils");
function normalizeOptions(tree, options) {
    var _a;
    let rxjsVersion;
    try {
        rxjsVersion = (0, semver_1.checkAndCleanWithSemver)('rxjs', (0, devkit_1.readJson)(tree, 'package.json').dependencies['rxjs']);
    }
    catch (_b) {
        rxjsVersion = (0, semver_1.checkAndCleanWithSemver)('rxjs', versions_1.rxjsVersion);
    }
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const isStandalone = (0, ast_utils_1.isNgStandaloneApp)(tree, options.project);
    const appConfigPath = (0, devkit_1.joinPathFragments)(project.sourceRoot, 'app/app.config.ts');
    const appMainPath = project.targets.build.options.main;
    /** If NgModule App
     * -> Use App Module
     * If Standalone
     * -> Check Config File exists (v16+)
     * --> If so, use that
     * --> If not, use main.ts
     */
    const parent = !isStandalone
        ? (0, devkit_1.joinPathFragments)(project.sourceRoot, 'app/app.module.ts')
        : tree.exists(appConfigPath)
            ? appConfigPath
            : appMainPath;
    options.directory = (_a = options.directory) !== null && _a !== void 0 ? _a : '+state';
    return Object.assign(Object.assign({}, options), { parent, directory: (0, devkit_1.names)(options.directory).fileName, rxjsVersion });
}
exports.normalizeOptions = normalizeOptions;
