"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeNameAndPaths = exports.getRelativeImportToFile = exports.pathStartsWith = void 0;
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const names_1 = require("./names");
function pathStartsWith(path1, path2) {
    const normalizedPath1 = (0, devkit_1.joinPathFragments)(devkit_1.workspaceRoot, path1);
    const normalizedPath2 = (0, devkit_1.joinPathFragments)(devkit_1.workspaceRoot, path2);
    return normalizedPath1.startsWith(normalizedPath2);
}
exports.pathStartsWith = pathStartsWith;
function getRelativeImportToFile(sourceFilePath, targetFilePath) {
    const relativeDirToTarget = (0, path_1.relative)((0, path_1.dirname)(sourceFilePath), (0, path_1.dirname)(targetFilePath));
    return `./${(0, devkit_1.joinPathFragments)(relativeDirToTarget, (0, path_1.basename)(targetFilePath, '.ts'))}`;
}
exports.getRelativeImportToFile = getRelativeImportToFile;
function normalizeNameAndPaths(tree, options) {
    var _a;
    const { root, sourceRoot, projectType } = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const projectSourceRoot = sourceRoot !== null && sourceRoot !== void 0 ? sourceRoot : (0, devkit_1.joinPathFragments)(root, 'src');
    const { name, path: namePath } = (0, names_1.parseNameWithPath)(options.name);
    const path = (_a = options.path) !== null && _a !== void 0 ? _a : (0, devkit_1.joinPathFragments)(projectSourceRoot, projectType === 'application' ? 'app' : 'lib', namePath);
    const directory = options.flat
        ? (0, devkit_1.normalizePath)(path)
        : (0, devkit_1.joinPathFragments)(path, name);
    const fileName = options.type
        ? `${name}.${(0, devkit_1.names)(options.type).fileName}`
        : name;
    const filePath = (0, devkit_1.joinPathFragments)(directory, `${fileName}.ts`);
    return {
        directory,
        fileName,
        filePath,
        name,
        path,
        root,
        sourceRoot,
    };
}
exports.normalizeNameAndPaths = normalizeNameAndPaths;
