"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateAppModule = void 0;
const devkit_1 = require("@nx/devkit");
const ensure_typescript_1 = require("@nx/js/src/utils/typescript/ensure-typescript");
const version_utils_1 = require("../../utils/version-utils");
function updateAppModule(tree, schema) {
    const angularMajorVersion = (0, version_utils_1.getInstalledAngularMajorVersion)(tree);
    if (angularMajorVersion >= 16) {
        return;
    }
    (0, ensure_typescript_1.ensureTypescript)();
    const { tsquery } = require('@phenomnomnominal/tsquery');
    // read the content of app module
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, schema.project);
    const pathToAppModule = (0, devkit_1.joinPathFragments)(projectConfig.sourceRoot, 'app/app.module.ts');
    const fileContents = tree.read(pathToAppModule, 'utf-8');
    const ast = tsquery.ast(fileContents);
    const browserModuleImportNodes = tsquery(ast, 'PropertyAssignment:has(Identifier[name=imports]) > ArrayLiteralExpression Identifier[name=BrowserModule]', { visitAllChildren: true });
    if (browserModuleImportNodes.length === 0) {
        throw new Error(`Could not find BrowserModule declaration in ${pathToAppModule}. Please ensure this is correct.`);
    }
    const browserModuleNode = browserModuleImportNodes[0];
    const newFileContents = `${fileContents.slice(0, browserModuleNode.getEnd())}.withServerTransition({ appId: '${schema.appId}' })${fileContents.slice(browserModuleNode.getEnd(), fileContents.length)}`;
    tree.write(pathToAppModule, newFileContents);
}
exports.updateAppModule = updateAppModule;
