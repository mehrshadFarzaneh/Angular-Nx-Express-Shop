"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePathIsUnderProjectRoot = exports.validateStandaloneOption = exports.validateProject = void 0;
const devkit_1 = require("@nx/devkit");
const semver_1 = require("semver");
const path_1 = require("./path");
const version_utils_1 = require("./version-utils");
function validateProject(tree, projectName) {
    const projects = (0, devkit_1.getProjects)(tree);
    if (!projects.has(projectName)) {
        throw new Error(`Project "${projectName}" does not exist! Please provide an existing project name.`);
    }
}
exports.validateProject = validateProject;
function validateStandaloneOption(tree, standalone, angularVersion) {
    if (!standalone) {
        return;
    }
    const installedAngularVersion = angularVersion !== null && angularVersion !== void 0 ? angularVersion : (0, version_utils_1.getInstalledAngularVersionInfo)(tree).version;
    if ((0, semver_1.lt)(installedAngularVersion, '14.1.0')) {
        throw new Error((0, devkit_1.stripIndents) `The "standalone" option is only supported in Angular >= 14.1.0. You are currently using "${installedAngularVersion}".
    You can resolve this error by removing the "standalone" option or by migrating to Angular 14.1.0.`);
    }
}
exports.validateStandaloneOption = validateStandaloneOption;
function validatePathIsUnderProjectRoot(tree, projectName, path) {
    if (!path) {
        return;
    }
    const { root } = (0, devkit_1.readProjectConfiguration)(tree, projectName);
    let pathToComponent = (0, devkit_1.normalizePath)(path);
    pathToComponent = pathToComponent.startsWith('/')
        ? pathToComponent.slice(1)
        : pathToComponent;
    if (!(0, path_1.pathStartsWith)(pathToComponent, root)) {
        throw new Error(`The path provided (${path}) does not exist under the project root (${root}). ` +
            `Please make sure to provide a path that exists under the project root.`);
    }
}
exports.validatePathIsUnderProjectRoot = validatePathIsUnderProjectRoot;
