"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOptions = void 0;
const devkit_1 = require("@nx/devkit");
const version_utils_1 = require("../../utils/version-utils");
const version_utils_2 = require("../../../utils/version-utils");
const semver_1 = require("semver");
const ast_utils_1 = require("../../../utils/nx-devkit/ast-utils");
function validateOptions(tree, options) {
    var _a, _b;
    if (!(0, devkit_1.getProjects)(tree).has(options.project)) {
        throw new Error(`Could not find project '${options.project}'. Please ensure the project name is correct and exists.`);
    }
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    if (project.projectType !== 'application') {
        throw new Error(`NgRx Root Stores can only be added to applications, please ensure the project you use is an application.`);
    }
    if (!options.minimal && !options.name) {
        throw new Error(`If generating a global feature state with your root store, you must provide a name for it with '--name'.`);
    }
    const angularVersionInfo = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    const intendedNgRxVersionForAngularMajor = (0, version_utils_2.getPkgVersionForAngularMajorVersion)('ngrxVersion', angularVersionInfo.major);
    const ngrxMajorVersion = (_b = (_a = (0, version_utils_1.getInstalledPackageVersionInfo)(tree, '@ngrx/store')) === null || _a === void 0 ? void 0 : _a.major) !== null && _b !== void 0 ? _b : (0, semver_1.major)((0, semver_1.coerce)(intendedNgRxVersionForAngularMajor));
    const isStandalone = (0, ast_utils_1.isNgStandaloneApp)(tree, options.project);
    if ((0, semver_1.lt)(angularVersionInfo.version, '14.1.0') || ngrxMajorVersion < 15) {
        if (isStandalone) {
            throw new Error(`The provided project '${options.project}' is set up to use Standalone APIs, however your workspace is not configured to support Standalone APIs. ` +
                'Please make sure to provide a path to an "NgModule" where the state will be registered. ');
        }
    }
}
exports.validateOptions = validateOptions;
