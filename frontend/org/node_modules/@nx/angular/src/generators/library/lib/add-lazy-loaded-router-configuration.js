"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addLazyLoadedRouterConfiguration = void 0;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const path_1 = require("path");
const ensure_typescript_1 = require("@nx/js/src/utils/typescript/ensure-typescript");
let tsModule;
function addLazyLoadedRouterConfiguration(tree, options) {
    if (!tsModule) {
        tsModule = (0, ensure_typescript_1.ensureTypescript)();
    }
    const constName = `${(0, devkit_1.names)(options.fileName).propertyName}Routes`;
    tree.write((0, devkit_1.joinPathFragments)((0, path_1.dirname)(options.modulePath), 'lib.routes.ts'), `import { Route } from '@angular/router';

export const ${constName}: Route[] = [/* {path: '', pathMatch: 'full', component: InsertYourComponentHere} */];`);
    const routeFileSource = tree.read(options.modulePath, 'utf-8');
    let sourceFile = tsModule.createSourceFile(options.modulePath, routeFileSource, tsModule.ScriptTarget.Latest, true);
    sourceFile = (0, js_1.insertImport)(tree, sourceFile, options.modulePath, 'RouterModule', '@angular/router');
    sourceFile = (0, js_1.insertImport)(tree, sourceFile, options.modulePath, constName, './lib.routes');
    const pathToIndex = (0, devkit_1.joinPathFragments)(options.projectRoot, 'src/index.ts');
    const indexFileContents = tree.read(pathToIndex, 'utf-8');
    tree.write(pathToIndex, `${indexFileContents}
  export * from './lib/lib.routes';`);
}
exports.addLazyLoadedRouterConfiguration = addLazyLoadedRouterConfiguration;
