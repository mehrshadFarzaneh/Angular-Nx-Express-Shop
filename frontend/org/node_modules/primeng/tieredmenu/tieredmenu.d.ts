import { AnimationEvent } from '@angular/animations';
import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { MenuItem, OverlayService, PrimeNGConfig, PrimeTemplate } from 'primeng/api';
import { ConnectedOverlayScrollHandler } from 'primeng/dom';
import { Nullable, VoidListener } from 'primeng/ts-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/router";
import * as i3 from "primeng/ripple";
import * as i4 from "primeng/tooltip";
import * as i5 from "primeng/icons/angleright";
import * as i6 from "primeng/api";
export declare class TieredMenuSub implements OnDestroy {
    private document;
    el: ElementRef;
    renderer: Renderer2;
    private cd;
    tieredMenu: TieredMenu;
    item: MenuItem | undefined;
    root: boolean | undefined;
    autoDisplay: boolean | undefined;
    autoZIndex: boolean;
    baseZIndex: number;
    mobileActive: boolean | undefined;
    popup: boolean | undefined;
    get parentActive(): boolean;
    set parentActive(value: boolean);
    sublistViewChild: ElementRef | undefined;
    leafClick: EventEmitter<any>;
    keydownItem: EventEmitter<any>;
    _parentActive: boolean | undefined;
    documentClickListener: VoidListener;
    menuHoverActive: boolean;
    activeItem: any;
    constructor(document: Document, el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef, tieredMenu: TieredMenu);
    onItemClick(event: Event, item: MenuItem): void;
    onItemMouseEnter(event: MouseEvent, item: MenuItem): void;
    onLeafClick(): void;
    onItemKeyDown(event: KeyboardEvent, item: MenuItem): void;
    positionSubmenu(): void;
    findNextItem(item: Element): any;
    findPrevItem(item: Element): any;
    onChildItemKeyDown(event: KeyboardEvent): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TieredMenuSub, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TieredMenuSub, "p-tieredMenuSub", never, { "item": { "alias": "item"; "required": false; }; "root": { "alias": "root"; "required": false; }; "autoDisplay": { "alias": "autoDisplay"; "required": false; }; "autoZIndex": { "alias": "autoZIndex"; "required": false; }; "baseZIndex": { "alias": "baseZIndex"; "required": false; }; "mobileActive": { "alias": "mobileActive"; "required": false; }; "popup": { "alias": "popup"; "required": false; }; "parentActive": { "alias": "parentActive"; "required": false; }; }, { "leafClick": "leafClick"; "keydownItem": "keydownItem"; }, never, never, false, never>;
}
/**
 * TieredMenu displays submenus in nested overlays.
 * @group Components
 */
export declare class TieredMenu implements AfterContentInit, OnDestroy {
    private document;
    el: ElementRef;
    renderer: Renderer2;
    cd: ChangeDetectorRef;
    config: PrimeNGConfig;
    overlayService: OverlayService;
    /**
     * An array of menuitems.
     * @group Props
     */
    model: MenuItem[] | undefined;
    /**
     * Defines if menu would displayed as a popup.
     * @group Props
     */
    popup: boolean | undefined;
    /**
     * Inline style of the component.
     * @group Props
     */
    style: {
        [klass: string]: any;
    } | null | undefined;
    /**
     * Style class of the component.
     * @group Props
     */
    styleClass: string | undefined;
    /**
     * Target element to attach the overlay, valid values are "body" or a local ng-template variable of another element.
     * @group Props
     */
    appendTo: HTMLElement | ElementRef | TemplateRef<any> | string | null | undefined | any;
    /**
     * Whether to automatically manage layering.
     * @group Props
     */
    autoZIndex: boolean;
    /**
     * Base zIndex value to use in layering.
     * @group Props
     */
    baseZIndex: number;
    /**
     * Whether to show a root submenu on mouse over.
     * @group Props
     */
    autoDisplay: boolean | undefined;
    /**
     * Transition options of the show animation.
     * @group Props
     */
    showTransitionOptions: string;
    /**
     * Transition options of the hide animation.
     * @group Props
     */
    hideTransitionOptions: string;
    /**
     * Callback to invoke when overlay menu is shown.
     * @group Emits
     */
    onShow: EventEmitter<any>;
    /**
     * Callback to invoke when overlay menu is hidden.
     * @group Emits
     */
    onHide: EventEmitter<any>;
    templates: QueryList<PrimeTemplate> | undefined;
    submenuIconTemplate: Nullable<TemplateRef<any>>;
    parentActive: boolean | undefined;
    container: HTMLDivElement | undefined;
    documentClickListener: VoidListener;
    documentResizeListener: VoidListener;
    preventDocumentDefault: boolean | undefined;
    scrollHandler: Nullable<ConnectedOverlayScrollHandler>;
    target: any;
    visible: boolean | undefined;
    relativeAlign: boolean | undefined;
    private window;
    constructor(document: Document, el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef, config: PrimeNGConfig, overlayService: OverlayService);
    ngAfterContentInit(): void;
    /**
     * Toggles the visibility of the popup menu.
     * @param {Event} event - Browser event.
     * @group Method
     */
    toggle(event: any): void;
    /**
     * Displays the popup menu.
     * @param {Event} even - Browser event.
     * @group Method
     */
    show(event: any): void;
    onOverlayClick(event: MouseEvent): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    alignOverlay(): void;
    onOverlayAnimationEnd(event: AnimationEvent): void;
    appendOverlay(): void;
    restoreOverlayAppend(): void;
    moveOnTop(): void;
    /**
     * Hides the popup menu.
     * @group Method
     */
    hide(): void;
    onWindowResize(): void;
    onLeafClick(): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    bindScrollListener(): void;
    unbindScrollListener(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TieredMenu, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TieredMenu, "p-tieredMenu", never, { "model": { "alias": "model"; "required": false; }; "popup": { "alias": "popup"; "required": false; }; "style": { "alias": "style"; "required": false; }; "styleClass": { "alias": "styleClass"; "required": false; }; "appendTo": { "alias": "appendTo"; "required": false; }; "autoZIndex": { "alias": "autoZIndex"; "required": false; }; "baseZIndex": { "alias": "baseZIndex"; "required": false; }; "autoDisplay": { "alias": "autoDisplay"; "required": false; }; "showTransitionOptions": { "alias": "showTransitionOptions"; "required": false; }; "hideTransitionOptions": { "alias": "hideTransitionOptions"; "required": false; }; }, { "onShow": "onShow"; "onHide": "onHide"; }, ["templates"], never, false, never>;
}
export declare class TieredMenuModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<TieredMenuModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<TieredMenuModule, [typeof TieredMenu, typeof TieredMenuSub], [typeof i1.CommonModule, typeof i2.RouterModule, typeof i3.RippleModule, typeof i4.TooltipModule, typeof i5.AngleRightIcon, typeof i6.SharedModule], [typeof TieredMenu, typeof i2.RouterModule, typeof i4.TooltipModule, typeof i6.SharedModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<TieredMenuModule>;
}
