{
  "version": 2,
  "outputCapture": "direct-nodejs",
  "$schema": "http://json-schema.org/schema",
  "title": "ng-packagr Target",
  "description": "Builds a library with support for incremental builds.\n\nThis executor is meant to be used with buildable libraries in an incremental build scenario. It is similar to the `@nx/angular:package` executor but with some key differences:\n- For supported Angular versions lower than v16, it doesn't run `ngcc` automatically (`ngcc` is no longer available from Angular v16 onwards, for lower versions, it needs to be run separately beforehand if needed, this can be done in a `postinstall` hook on `package.json`).\n- It only produces ESM2022 bundles (ESM2020 for supported Angular versions lower than v16).",
  "cli": "nx",
  "type": "object",
  "presets": [
    {
      "name": "Buildable Library with Tailwind",
      "keys": ["project", "tailwindConfig"]
    },
    {
      "name": "Updating Project Dependencies for Buildable Library",
      "keys": [
        "project",
        "updateBuildableProjectDepsInPackageJson",
        "buildableProjectDepsInPackageJsonType"
      ]
    }
  ],
  "properties": {
    "project": {
      "type": "string",
      "description": "The file path for the ng-packagr configuration file, relative to the workspace root."
    },
    "tsConfig": {
      "type": "string",
      "description": "The full path for the TypeScript configuration file, relative to the workspace root.",
      "x-completion-type": "file",
      "x-completion-glob": "tsconfig.*.json",
      "x-priority": "important"
    },
    "watch": {
      "type": "boolean",
      "description": "Whether to run a build when any file changes.",
      "default": false
    },
    "updateBuildableProjectDepsInPackageJson": {
      "type": "boolean",
      "description": "Whether to update the buildable project dependencies in the build output package.json.",
      "default": true
    },
    "buildableProjectDepsInPackageJsonType": {
      "type": "string",
      "description": "When `updateBuildableProjectDepsInPackageJson` is `true`, this adds dependencies to either `peerDependencies` or `dependencies`.",
      "enum": ["dependencies", "peerDependencies"],
      "default": "peerDependencies"
    },
    "tailwindConfig": {
      "type": "string",
      "description": "The full path for the Tailwind configuration file, relative to the workspace root. If not provided and a `tailwind.config.js` file exists in the project or workspace root, it will be used. Otherwise, Tailwind will not be configured."
    }
  },
  "additionalProperties": false,
  "required": ["project"]
}
