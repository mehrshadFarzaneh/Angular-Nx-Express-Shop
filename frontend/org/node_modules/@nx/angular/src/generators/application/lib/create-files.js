"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFiles = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const create_ts_config_1 = require("../../utils/create-ts-config");
const test_runners_1 = require("../../../utils/test-runners");
const version_utils_1 = require("../../utils/version-utils");
function createFiles(tree, options, rootOffset) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const installedAngularInfo = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
        const substitutions = {
            rootSelector: `${options.prefix}-root`,
            appName: options.name,
            inlineStyle: options.inlineStyle,
            inlineTemplate: options.inlineTemplate,
            style: options.style,
            viewEncapsulation: options.viewEncapsulation,
            unitTesting: options.unitTestRunner !== test_runners_1.UnitTestRunner.None,
            routing: options.routing,
            minimal: options.minimal,
            nxWelcomeSelector: `${options.prefix}-nx-welcome`,
            rootTsConfig: (0, devkit_1.joinPathFragments)(rootOffset, (0, js_1.getRootTsConfigFileName)(tree)),
            installedAngularInfo,
            rootOffset,
            tpl: '',
        };
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/base'), options.appProjectRoot, substitutions);
        if (installedAngularInfo.major === 14) {
            (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/v14'), options.appProjectRoot, substitutions);
        }
        if (options.standalone) {
            (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/standalone-components'), options.appProjectRoot, substitutions);
        }
        else {
            yield (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/ng-module'), options.appProjectRoot, substitutions);
        }
        (0, create_ts_config_1.createTsConfig)(tree, options.appProjectRoot, 'app', options, (0, js_1.getRelativePathToRootTsConfig)(tree, options.appProjectRoot));
        if (!options.routing) {
            tree.delete((0, devkit_1.joinPathFragments)(options.appProjectRoot, '/src/app/app.routes.ts'));
        }
        if (options.skipTests || options.unitTestRunner === test_runners_1.UnitTestRunner.None) {
            tree.delete((0, devkit_1.joinPathFragments)(options.appProjectRoot, '/src/app/app.component.spec.ts'));
        }
        if (options.inlineTemplate) {
            tree.delete((0, devkit_1.joinPathFragments)(options.appProjectRoot, '/src/app/app.component.html'));
        }
        if (options.inlineStyle) {
            tree.delete((0, devkit_1.joinPathFragments)(options.appProjectRoot, `/src/app/app.component.${options.style}`));
        }
        if (options.minimal) {
            tree.delete((0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/app/nx-welcome.component.ts'));
        }
    });
}
exports.createFiles = createFiles;
