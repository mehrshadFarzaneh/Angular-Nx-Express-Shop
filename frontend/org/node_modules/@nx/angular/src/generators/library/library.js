"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.libraryGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const jest_1 = require("@nx/jest");
const linter_1 = require("@nx/linter");
const js_1 = require("@nx/js");
const semver_1 = require("semver");
const init_1 = require("../../generators/init/init");
const test_runners_1 = require("../../utils/test-runners");
const add_linting_1 = require("../add-linting/add-linting");
const setup_tailwind_1 = require("../setup-tailwind/setup-tailwind");
const version_utils_1 = require("../utils/version-utils");
const dependencies_1 = require("../utils/dependencies");
const add_module_1 = require("./lib/add-module");
const add_standalone_component_1 = require("./lib/add-standalone-component");
const enable_strict_type_checking_1 = require("./lib/enable-strict-type-checking");
const normalize_options_1 = require("./lib/normalize-options");
const update_lib_package_npm_scope_1 = require("./lib/update-lib-package-npm-scope");
const update_tsconfig_1 = require("./lib/update-tsconfig");
const create_files_1 = require("./lib/create-files");
const add_project_1 = require("./lib/add-project");
function libraryGenerator(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // Do some validation checks
        if (!schema.routing && schema.lazy) {
            throw new Error(`To use "--lazy" option, "--routing" must also be set.`);
        }
        if (schema.publishable === true && !schema.importPath) {
            throw new Error(`For publishable libs you have to provide a proper "--importPath" which needs to be a valid npm package name (e.g. my-awesome-lib or @myorg/my-lib)`);
        }
        if (schema.addTailwind && !schema.buildable && !schema.publishable) {
            throw new Error(`To use "--addTailwind" option, you have to set either "--buildable" or "--publishable".`);
        }
        const userInstalledAngularVersion = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
        if ((0, semver_1.lt)(userInstalledAngularVersion.version, '14.1.0') && schema.standalone) {
            throw new Error(`The "--standalone" option is not supported in Angular versions < 14.1.0.`);
        }
        const options = (0, normalize_options_1.normalizeOptions)(tree, schema);
        const { libraryOptions } = options;
        const pkgVersions = (0, version_utils_1.versions)(tree);
        yield (0, init_1.default)(tree, Object.assign(Object.assign({}, libraryOptions), { skipFormat: true, e2eTestRunner: test_runners_1.E2eTestRunner.None }));
        const project = (0, add_project_1.addProject)(tree, libraryOptions);
        (0, create_files_1.createFiles)(tree, options, project);
        (0, update_tsconfig_1.updateTsConfig)(tree, libraryOptions);
        yield addUnitTestRunner(tree, libraryOptions);
        updateNpmScopeIfBuildableOrPublishable(tree, libraryOptions);
        if (!libraryOptions.standalone) {
            (0, add_module_1.addModule)(tree, libraryOptions);
        }
        else {
            yield (0, add_standalone_component_1.addStandaloneComponent)(tree, options);
        }
        setStrictMode(tree, libraryOptions);
        yield addLinting(tree, libraryOptions);
        if (libraryOptions.addTailwind) {
            yield (0, setup_tailwind_1.default)(tree, {
                project: libraryOptions.name,
                skipFormat: true,
            });
        }
        if (libraryOptions.buildable || libraryOptions.publishable) {
            (0, version_utils_1.addDependenciesToPackageJsonIfDontExist)(tree, {}, {
                'ng-packagr': pkgVersions.ngPackagrVersion,
            });
            (0, dependencies_1.addBuildableLibrariesPostCssDependencies)(tree);
        }
        (0, js_1.addTsConfigPath)(tree, libraryOptions.importPath, [
            (0, devkit_1.joinPathFragments)(libraryOptions.projectRoot, './src', 'index.ts'),
        ]);
        if (!libraryOptions.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return () => {
            (0, devkit_1.installPackagesTask)(tree);
        };
    });
}
exports.libraryGenerator = libraryGenerator;
function addUnitTestRunner(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (options.unitTestRunner === 'jest') {
            yield (0, jest_1.jestProjectGenerator)(host, {
                project: options.name,
                setupFile: 'angular',
                supportTsx: false,
                skipSerializers: false,
                skipFormat: true,
                skipPackageJson: options.skipPackageJson,
            });
            const setupFile = (0, devkit_1.joinPathFragments)(options.projectRoot, 'src', 'test-setup.ts');
            if (options.strict && host.exists(setupFile)) {
                const contents = host.read(setupFile, 'utf-8');
                host.write(setupFile, `// @ts-expect-error https://thymikee.github.io/jest-preset-angular/docs/getting-started/test-environment
globalThis.ngJest = {
  testEnvironmentOptions: {
    errorOnUnknownElements: true,
    errorOnUnknownProperties: true,
  },
};
${contents}`);
            }
        }
    });
}
function updateNpmScopeIfBuildableOrPublishable(host, options) {
    if (options.buildable || options.publishable) {
        (0, update_lib_package_npm_scope_1.updateLibPackageNpmScope)(host, options);
    }
}
function setStrictMode(host, options) {
    if (options.strict) {
        (0, enable_strict_type_checking_1.enableStrictTypeChecking)(host, options);
    }
    else {
        (0, enable_strict_type_checking_1.setLibraryStrictDefault)(host, options.strict);
    }
}
function addLinting(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (options.linter === linter_1.Linter.None) {
            return;
        }
        yield (0, add_linting_1.default)(host, {
            projectName: options.name,
            projectRoot: options.projectRoot,
            prefix: options.prefix,
            unitTestRunner: options.unitTestRunner,
            setParserOptionsProject: options.setParserOptionsProject,
            skipFormat: true,
            skipPackageJson: options.skipPackageJson,
        });
    });
}
exports.default = libraryGenerator;
