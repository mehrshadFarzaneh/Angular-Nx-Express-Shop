"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const ts = require("typescript");
const file_change_recorder_1 = require("../../utils/file-change-recorder");
function default_1(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        (0, devkit_1.visitNotIgnoredFiles)(tree, '/', (path) => {
            if (path.endsWith('.ts') && !path.endsWith('.d.ts')) {
                const content = tree.read(path, 'utf8');
                if (content.includes('@angular/platform-server') &&
                    content.includes('renderModule')) {
                    const source = ts.createSourceFile(path, content.toString().replace(/^\uFEFF/, ''), ts.ScriptTarget.Latest, true);
                    let recorder;
                    let printer;
                    ts.forEachChild(source, function analyze(node) {
                        if (!(ts.isExportDeclaration(node) &&
                            node.moduleSpecifier &&
                            ts.isStringLiteral(node.moduleSpecifier) &&
                            node.moduleSpecifier.text === '@angular/platform-server' &&
                            node.exportClause &&
                            ts.isNamedExports(node.exportClause))) {
                            // Not a @angular/platform-server named export.
                            return;
                        }
                        const exportClause = node.exportClause;
                        const newElements = [];
                        for (const element of exportClause.elements) {
                            if (element.name.text !== 'renderModule') {
                                newElements.push(element);
                            }
                        }
                        if (newElements.length === exportClause.elements.length) {
                            // No changes
                            return;
                        }
                        recorder !== null && recorder !== void 0 ? recorder : (recorder = new file_change_recorder_1.FileChangeRecorder(tree, path));
                        if (newElements.length) {
                            // Update named exports as there are leftovers.
                            const newExportClause = ts.factory.updateNamedExports(exportClause, newElements);
                            printer !== null && printer !== void 0 ? printer : (printer = ts.createPrinter());
                            const fix = printer.printNode(ts.EmitHint.Unspecified, newExportClause, source);
                            const index = exportClause.getStart();
                            const length = exportClause.getWidth();
                            recorder.remove(index, index + length);
                            recorder.insertLeft(index, fix);
                        }
                        else {
                            // Delete export as no exports remain.
                            recorder.remove(node.getStart(), node.getStart() + node.getWidth());
                        }
                        ts.forEachChild(node, analyze);
                    });
                    if (recorder) {
                        recorder.applyChanges();
                    }
                }
            }
        });
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = default_1;
