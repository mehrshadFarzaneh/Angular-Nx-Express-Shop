"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureAngularDevKitPeerDependenciesAreInstalled = void 0;
const devkit_1 = require("@nx/devkit");
const version_utils_1 = require("../../../utils/version-utils");
const version_utils_2 = require("../../utils/version-utils");
function ensureAngularDevKitPeerDependenciesAreInstalled(tree) {
    var _a;
    const packagesToInstall = [
        '@angular-devkit/core',
        '@angular-devkit/schematics',
        '@schematics/angular',
    ];
    const { devDependencies, dependencies } = (0, devkit_1.readJson)(tree, 'package.json');
    let angularCliVersion = (_a = devDependencies === null || devDependencies === void 0 ? void 0 : devDependencies['@angular/cli']) !== null && _a !== void 0 ? _a : dependencies === null || dependencies === void 0 ? void 0 : dependencies['@angular/cli'];
    if (!angularCliVersion) {
        const angularMajorVersion = (0, version_utils_2.getInstalledAngularMajorVersion)(tree);
        const angularDevkitVersion = (0, version_utils_1.getPkgVersionForAngularMajorVersion)('angularDevkitVersion', angularMajorVersion);
        angularCliVersion = angularDevkitVersion;
    }
    const filteredPackages = packagesToInstall
        .filter((pkg) => !(devDependencies === null || devDependencies === void 0 ? void 0 : devDependencies[pkg]) && !(dependencies === null || dependencies === void 0 ? void 0 : dependencies[pkg]))
        .reduce((allPkgs, pkg) => {
        allPkgs[pkg] = angularCliVersion;
        return allPkgs;
    }, {});
    (0, devkit_1.addDependenciesToPackageJson)(tree, {}, filteredPackages);
}
exports.ensureAngularDevKitPeerDependenciesAreInstalled = ensureAngularDevKitPeerDependenciesAreInstalled;
