{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CompleteNotification,\n  ErrorNotification,\n  NextNotification,\n  Observable,\n  ObservableNotification,\n  Subscription,\n} from 'rxjs';\nimport { TestScheduler } from 'rxjs/testing';\nimport { isEqual } from 'lodash';\nimport { getTestScheduler } from './scheduler';\nimport { TestObservable } from './test-observables';\nimport { mapSymbolsToNotifications } from './map-symbols-to-notifications';\nimport { TestMessages } from './types';\nimport { unparseMarble } from './marble-unparser';\n\n/*\n * Based on source code found in rxjs library\n * https://github.com/ReactiveX/rxjs/blob/master/src/testing/TestScheduler.ts\n *\n */\nexport function materializeInnerObservable<T>(\n  observable: Observable<T>,\n  outerFrame: number,\n): TestMessages {\n  const messages: TestMessages = [];\n  const scheduler = getTestScheduler();\n\n  observable.subscribe({\n    next: (value: any) => {\n      messages.push({\n        frame: scheduler.frame - outerFrame,\n        notification: {\n          kind: 'N',\n          value,\n          error: undefined,\n        } as NextNotification<T>,\n      });\n    },\n    error: (error: any) => {\n      messages.push({\n        frame: scheduler.frame - outerFrame,\n        notification: {\n          kind: 'E',\n          value: undefined,\n          error,\n        } as ErrorNotification,\n      });\n    },\n    complete: () => {\n      messages.push({\n        frame: scheduler.frame - outerFrame,\n        notification: {\n          kind: 'C',\n          value: undefined,\n          error: undefined,\n        } as CompleteNotification,\n      });\n    },\n  });\n  return messages;\n}\n\nexport function toHaveSubscriptionsComparer(\n  actual: TestObservable,\n  marbles: string | string[],\n) {\n  const marblesArray: string[] =\n    typeof marbles === 'string' ? [marbles] : marbles;\n  const results = marblesArray.map((marbles) =>\n    TestScheduler.parseMarblesAsSubscriptions(marbles),\n  );\n\n  expect(results).toEqual(actual.getSubscriptions());\n\n  return { pass: true, message: () => '' };\n}\n\nexport function toBeObservableComparer(\n  actual: TestObservable,\n  fixture: TestObservable,\n) {\n  const results: TestMessages = [];\n  let subscription: Subscription;\n  const scheduler = getTestScheduler();\n\n  scheduler.schedule(() => {\n    subscription = actual.subscribe({\n      next: (x: any) => {\n        let value = x;\n\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = materializeInnerObservable(value, scheduler.frame);\n        }\n\n        results.push({\n          frame: scheduler.frame,\n          notification: {\n            kind: 'N',\n            value,\n            error: undefined,\n          } as NextNotification<any>,\n        });\n      },\n      error: (error: any) => {\n        results.push({\n          frame: scheduler.frame,\n          notification: {\n            kind: 'E',\n            value: undefined,\n            error,\n          } as ErrorNotification,\n        });\n      },\n      complete: () => {\n        results.push({\n          frame: scheduler.frame,\n          notification: {\n            kind: 'C',\n            value: undefined,\n            error: undefined,\n          } as CompleteNotification,\n        });\n      },\n    });\n  });\n  scheduler.flush();\n\n  const expected = TestScheduler.parseMarbles(\n    fixture.marbles,\n    fixture.values,\n    fixture.error,\n    true,\n    true,\n  );\n\n  try {\n    expect(results).toEqual(expected);\n\n    return { pass: true, message: () => '' };\n  } catch (e) {\n    const mapNotificationToSymbol = buildNotificationToSymbolMapper(\n      fixture.marbles,\n      expected,\n      isEqual,\n    );\n    const receivedMarble = unparseMarble(results, mapNotificationToSymbol);\n\n    const message = formatMessage(\n      fixture.marbles,\n      expected,\n      receivedMarble,\n      results,\n    );\n    return { pass: false, message: () => message };\n  }\n}\n\nfunction buildNotificationToSymbolMapper(\n  expectedMarbles: string,\n  expectedMessages: TestMessages,\n  equalityFn: (a: any, b: any) => boolean,\n) {\n  const symbolsToNotificationsMap = mapSymbolsToNotifications(\n    expectedMarbles,\n    expectedMessages,\n  );\n  return (notification: ObservableNotification<any>) => {\n    const mapped = Object.keys(symbolsToNotificationsMap).find((key) =>\n      equalityFn(symbolsToNotificationsMap[key], notification),\n    )!;\n\n    return mapped || '?';\n  };\n}\n\nfunction formatMessage(\n  expectedMarbles: string,\n  expectedMessages: TestMessages,\n  receivedMarbles: string,\n  receivedMessages: TestMessages,\n) {\n  return `\n    Expected: ${expectedMarbles},\n    Received: ${receivedMarbles},\n    \n    Expected:\n    ${JSON.stringify(expectedMessages)}\n    \n    Received:\n    ${JSON.stringify(receivedMessages)},\n  `;\n}\n"]}